[{"pid": "VUL4J-1", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "com/alibaba/fastjson/serializer/ObjectArrayCodec.java", "method": "ObjectArrayCodec.deserialze[128-180]", "lineno": 177, "content": "        parser.parseArray(componentClass, array, fieldName);", "_method_simple_signature": "deserialze(DefaultJSONParser,Type,Object)", "_file_in_project": "src/main/java/com/alibaba/fastjson/serializer/ObjectArrayCodec.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["com.alibaba.json.bvt.bug.Issue1005::test_for_issue"], "bug_method": "    public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n        if (lexer.token() == JSONToken.NULL) {\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n            byte[] bytes = lexer.bytesValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) bytes;\n        }\n\n        Class componentClass;\n        Type componentType;\n        if (type instanceof GenericArrayType) {\n            GenericArrayType clazz = (GenericArrayType) type;\n            componentType = clazz.getGenericComponentType();\n            if (componentType instanceof TypeVariable) {\n                TypeVariable typeVar = (TypeVariable) componentType;\n                Type objType = parser.getContext().type;\n                if (objType instanceof ParameterizedType) {\n                    ParameterizedType objParamType = (ParameterizedType) objType;\n                    Type objRawType = objParamType.getRawType();\n                    Type actualType = null;\n                    if (objRawType instanceof Class) {\n                        TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();\n                        for (int i = 0; i < objTypeParams.length; ++i) {\n                            if (objTypeParams[i].getName().equals(typeVar.getName())) {\n                                actualType = objParamType.getActualTypeArguments()[i];\n                            }\n                        }\n                    }\n                    if (actualType instanceof Class) {\n                        componentClass = (Class) actualType;\n                    } else {\n                        componentClass = Object.class;\n                    }\n                } else {\n                    componentClass = TypeUtils.getClass(typeVar.getBounds()[0]);\n                }\n            } else {\n                componentClass = TypeUtils.getClass(componentType);\n            }\n        } else {\n            Class clazz = (Class) type;\n            componentType = componentClass = clazz.getComponentType();\n        }\n        JSONArray array = new JSONArray();\n        parser.parseArray(componentClass, array, fieldName);\n\n        return (T) toObjectArray(parser, componentClass, array);\n    }", "fixed_method": "    public <T> T deserialze(DefaultJSONParser parser, Type type, Object fieldName) {\n        final JSONLexer lexer = parser.lexer;\n        if (lexer.token() == JSONToken.NULL) {\n            lexer.nextToken(JSONToken.COMMA);\n            return null;\n        }\n\n        if (lexer.token() == JSONToken.LITERAL_STRING) {\n            byte[] bytes = lexer.bytesValue();\n            lexer.nextToken(JSONToken.COMMA);\n            return (T) bytes;\n        }\n\n        Class componentClass;\n        Type componentType;\n        if (type instanceof GenericArrayType) {\n            GenericArrayType clazz = (GenericArrayType) type;\n            componentType = clazz.getGenericComponentType();\n            if (componentType instanceof TypeVariable) {\n                TypeVariable typeVar = (TypeVariable) componentType;\n                Type objType = parser.getContext().type;\n                if (objType instanceof ParameterizedType) {\n                    ParameterizedType objParamType = (ParameterizedType) objType;\n                    Type objRawType = objParamType.getRawType();\n                    Type actualType = null;\n                    if (objRawType instanceof Class) {\n                        TypeVariable[] objTypeParams = ((Class) objRawType).getTypeParameters();\n                        for (int i = 0; i < objTypeParams.length; ++i) {\n                            if (objTypeParams[i].getName().equals(typeVar.getName())) {\n                                actualType = objParamType.getActualTypeArguments()[i];\n                            }\n                        }\n                    }\n                    if (actualType instanceof Class) {\n                        componentClass = (Class) actualType;\n                    } else {\n                        componentClass = Object.class;\n                    }\n                } else {\n                    componentClass = TypeUtils.getClass(typeVar.getBounds()[0]);\n                }\n            } else {\n                componentClass = TypeUtils.getClass(componentType);\n            }\n        } else {\n            Class clazz = (Class) type;\n            componentType = componentClass = clazz.getComponentType();\n        }\n        JSONArray array = new JSONArray();\n        parser.parseArray(componentType, array, fieldName);\n\n        return (T) toObjectArray(parser, componentClass, array);\n    }", "_vul4j_info": {"vul_id": "VUL4J-1", "cve_id": "CVE-2017-18349", "cwe_id": "CWE-20", "project": ["alibaba_fastjson"], "project_url": "https://github.com/alibaba/fastjson", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=com.alibaba.json.bvt.bug.Issue1005#test_for_issue", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "f5903fa56497c00ed0703ac875b511f9bd5f1d8e", "human_patch_url": "https://github.com/alibaba/fastjson/commit/f5903fa56497c00ed0703ac875b511f9bd5f1d8e", "failing_tests": ["com.alibaba.json.bvt.bug.Issue1005#test_for_issue"], "warning": ["DLS_DEAD_LOCAL_STORE@com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze"]}, "_vul4j_detailed_info": {"no": "1", "vul_id": "VUL4J-1", "cve_id": "CVE-2017-18349", "cwe_id": "CWE-20", "cwe_name": "Improper Input Validation", "owasp_id": "CWE Top 25", "repo_slug": "alibaba/fastjson", "human_patch": "https://github.com/alibaba/fastjson/commit/f5903fa56497c00ed0703ac875b511f9bd5f1d8e", "build_system": "Maven", "compliance_level": "8", "failing_tests": "com.alibaba.json.bvt.bug.Issue1005#test_for_issue", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=com.alibaba.json.bvt.bug.Issue1005#test_for_issue", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": "DLS_DEAD_LOCAL_STORE@com.alibaba.fastjson.serializer.ObjectArrayCodec#deserialze"}}, {"pid": "VUL4J-3", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/camel/converter/jaxp/XmlConverter.java", "method": "XmlConverter.toSAXSourceFromStream[575-607]", "lineno": 598, "content": "__insert__", "_method_simple_signature": "toSAXSourceFromStream(StreamSource,Exchange)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/converter/jaxp/XmlConverter.java"}], "dir.src.classes": "camel-core/src/main/java", "dir.src.tests": "camel-core/src/test/java", "tests.trigger": ["org.apache.camel.component.xslt.XsltDTDTest::testSendingStringMessage"], "bug_method": "    public SAXSource toSAXSourceFromStream(StreamSource source, Exchange exchange) throws SAXException {\n        InputSource inputSource;\n        if (source.getReader() != null) {\n            inputSource = new InputSource(source.getReader());\n        } else {\n            inputSource = new InputSource(source.getInputStream());\n        }\n        inputSource.setSystemId(source.getSystemId());\n        inputSource.setPublicId(source.getPublicId());\n        XMLReader xmlReader = null;\n        SAXParserFactory sfactory = null;\n        //Need to setup XMLReader security feature by default\n        try {\n            // use the SAXPaserFactory which is set from exchange\n            if (exchange != null) {\n                sfactory = exchange.getProperty(Exchange.SAXPARSER_FACTORY, SAXParserFactory.class);\n            }\n            if (sfactory == null) {\n                sfactory = SAXParserFactory.newInstance();\n                try {\n                    sfactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n                } catch (Exception e) {\n                    LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\", new Object[]{javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, \"true\", e});\n                }\n            }\n            sfactory.setNamespaceAware(true);\n            SAXParser parser = sfactory.newSAXParser();\n            xmlReader = parser.getXMLReader();\n        } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex);\n        }\n        return new SAXSource(xmlReader, inputSource);\n    }", "fixed_method": "    public SAXSource toSAXSourceFromStream(StreamSource source, Exchange exchange) throws SAXException {\n        InputSource inputSource;\n        if (source.getReader() != null) {\n            inputSource = new InputSource(source.getReader());\n        } else {\n            inputSource = new InputSource(source.getInputStream());\n        }\n        inputSource.setSystemId(source.getSystemId());\n        inputSource.setPublicId(source.getPublicId());\n        XMLReader xmlReader = null;\n        SAXParserFactory sfactory = null;\n        //Need to setup XMLReader security feature by default\n        try {\n            // use the SAXPaserFactory which is set from exchange\n            if (exchange != null) {\n                sfactory = exchange.getProperty(Exchange.SAXPARSER_FACTORY, SAXParserFactory.class);\n            }\n            if (sfactory == null) {\n                sfactory = SAXParserFactory.newInstance();\n                try {\n                    sfactory.setFeature(javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, true);\n                } catch (Exception e) {\n                    LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\", new Object[]{javax.xml.XMLConstants.FEATURE_SECURE_PROCESSING, \"true\", e});\n                }\n                try {\n                    sfactory.setFeature(\"http://xml.org/sax/features/external-general-entities\", false);\n                } catch (SAXException e) {\n                    LOG.warn(\"SAXParser doesn't support the feature {} with value {}, due to {}.\"\n                            , new Object[]{\"http://xml.org/sax/features/external-general-entities\", false, e});                \n                }\n            }\n            sfactory.setNamespaceAware(true);\n            SAXParser parser = sfactory.newSAXParser();\n            xmlReader = parser.getXMLReader();\n        } catch (Exception ex) {\n            LOG.warn(\"Cannot create the SAXParser XMLReader, due to {}\", ex);\n        }\n        return new SAXSource(xmlReader, inputSource);\n    }", "_vul4j_info": {"vul_id": "VUL4J-3", "cve_id": "CVE-2015-0263", "cwe_id": "Not Mapping", "project": ["apache_camel"], "project_url": "https://github.com/apache/camel", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl camel-core", "test_cmd": "mvn test -pl camel-core -Dtest=org.apache.camel.component.xslt.XsltDTDTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "camel-core", "fixing_commit_hash": "7d19340bcdb42f7aae584d9c5003ac4f7ddaee36", "human_patch_url": "https://github.com/apache/camel/commit/7d19340bcdb42f7aae584d9c5003ac4f7ddaee36", "failing_tests": ["org.apache.camel.component.xslt.XsltDTDTest#testSendingStringMessage"], "warning": [""]}, "_vul4j_detailed_info": {"no": "3", "vul_id": "VUL4J-3", "cve_id": "CVE-2015-0263", "cwe_id": "Not Mapping", "cwe_name": "Not Mapping", "owasp_id": "none", "repo_slug": "apache/camel", "human_patch": "https://github.com/apache/camel/commit/7d19340bcdb42f7aae584d9c5003ac4f7ddaee36", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.camel.component.xslt.XsltDTDTest#testSendingStringMessage", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl camel-core", "test_cmd": "mvn test -pl camel-core -Dtest=org.apache.camel.component.xslt.XsltDTDTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "camel-core", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-4", "bid": 0, "num_buggy_lines": 18, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1116, "content": "        // okay we can try to remedy the failed conversion by some special types", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1117, "content": "        if (answer == null) {", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1118, "content": "            // let's try coercing some common types into something JAXP work with the best for special types", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1119, "content": "            if (body instanceof WrappedFile) {", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1120, "content": "                // special for files so we can work with them out of the box", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1121, "content": "                InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, exchange, body);", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1122, "content": "                answer = new InputSource(is);", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1123, "content": "            } else if (body instanceof BeanInvocation) {", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1124, "content": "                // if its a null bean invocation then handle that specially", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1125, "content": "                BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, exchange, body);", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1126, "content": "                if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1127, "content": "                    // its a null argument from the bean invocation so use null as answer", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1128, "content": "                    answer = null;", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1129, "content": "                }", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1130, "content": "            } else if (body instanceof String) {", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1131, "content": "                answer = new InputSource(new StringReader((String) body));", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1132, "content": "            }", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}, {"file": "org/apache/camel/builder/xml/XPathBuilder.java", "method": "XPathBuilder.doGetDocument[1097-1148]", "lineno": 1133, "content": "        }", "_method_simple_signature": "doGetDocument(Exchange,Object)", "_file_in_project": "camel-core/src/main/java/org/apache/camel/builder/xml/XPathBuilder.java"}], "dir.src.classes": "camel-core/src/main/java", "dir.src.tests": "camel-core/src/test/java", "tests.trigger": ["org.apache.camel.builder.xml.XPathFeatureTest::testXPath", "org.apache.camel.builder.xml.XPathFeatureTest::testXPathNoTypeConverter", "org.apache.camel.builder.xml.XPathFeatureTest::testXPathResultOnInvalidData"], "bug_method": "    protected Object doGetDocument(Exchange exchange, Object body) throws Exception {\n        if (body == null) {\n            return null;\n        }\n\n        Object answer = null;\n\n        Class<?> type = getDocumentType();\n        Exception cause = null;\n        if (type != null) {\n            // try to get the body as the desired type\n            try {\n                answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body);\n            } catch (Exception e) {\n                // we want to store the caused exception, if we could not convert\n                cause = e;\n            }\n        }\n\n        // okay we can try to remedy the failed conversion by some special types\n        if (answer == null) {\n            // let's try coercing some common types into something JAXP work with the best for special types\n            if (body instanceof WrappedFile) {\n                // special for files so we can work with them out of the box\n                InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, exchange, body);\n                answer = new InputSource(is);\n            } else if (body instanceof BeanInvocation) {\n                // if its a null bean invocation then handle that specially\n                BeanInvocation bi = exchange.getContext().getTypeConverter().convertTo(BeanInvocation.class, exchange, body);\n                if (bi.getArgs() != null && bi.getArgs().length == 1 && bi.getArgs()[0] == null) {\n                    // its a null argument from the bean invocation so use null as answer\n                    answer = null;\n                }\n            } else if (body instanceof String) {\n                answer = new InputSource(new StringReader((String) body));\n            }\n        }\n\n        if (type == null && answer == null) {\n            // fallback to get the body as is\n            answer = body;\n        } else if (answer == null) {\n            // there was a type, and we could not convert to it, then fail\n            if (cause != null) {\n                throw cause;\n            } else {\n                throw new NoTypeConversionAvailableException(body, type);\n            }\n        }\n\n        return answer;\n    }", "fixed_method": "    protected Object doGetDocument(Exchange exchange, Object body) throws Exception {\n        if (body == null) {\n            return null;\n        }\n\n        Object answer = null;\n\n        Class<?> type = getDocumentType();\n        Exception cause = null;\n        if (type != null) {\n            // try to get the body as the desired type\n            try {\n                answer = exchange.getContext().getTypeConverter().convertTo(type, exchange, body);\n            } catch (Exception e) {\n                // we want to store the caused exception, if we could not convert\n                cause = e;\n            }\n        }\n\n        if (type == null && answer == null) {\n            // fallback to get the body as is\n            answer = body;\n        } else if (answer == null) {\n            // there was a type, and we could not convert to it, then fail\n            if (cause != null) {\n                throw cause;\n            } else {\n                throw new NoTypeConversionAvailableException(body, type);\n            }\n        }\n\n        return answer;\n    }", "_vul4j_info": {"vul_id": "VUL4J-4", "cve_id": "CVE-2015-0264", "cwe_id": "Not Mapping", "project": ["apache_camel"], "project_url": "https://github.com/apache/camel", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl camel-core", "test_cmd": "mvn test -pl camel-core -Dtest=org.apache.camel.builder.xml.XPathFeatureTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "camel-core", "fixing_commit_hash": "1df559649a96a1ca0368373387e542f46e4820da", "human_patch_url": "https://github.com/apache/camel/commit/1df559649a96a1ca0368373387e542f46e4820da", "failing_tests": ["org.apache.camel.builder.xml.XPathFeatureTest#testXPathNoTypeConverter", "org.apache.camel.builder.xml.XPathFeatureTest#testXPath", "org.apache.camel.builder.xml.XPathFeatureTest#testXPathResultOnInvalidData"], "warning": [""]}, "_vul4j_detailed_info": {"no": "4", "vul_id": "VUL4J-4", "cve_id": "CVE-2015-0264", "cwe_id": "Not Mapping", "cwe_name": "Not Mapping", "owasp_id": "none", "repo_slug": "apache/camel", "human_patch": "https://github.com/apache/camel/commit/1df559649a96a1ca0368373387e542f46e4820da", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.camel.builder.xml.XPathFeatureTest#testXPathNoTypeConverter,org.apache.camel.builder.xml.XPathFeatureTest#testXPath,org.apache.camel.builder.xml.XPathFeatureTest#testXPathResultOnInvalidData", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl camel-core", "test_cmd": "mvn test -pl camel-core -Dtest=org.apache.camel.builder.xml.XPathFeatureTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "camel-core", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-5", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/commons/compress/archivers/examples/Expander.java", "method": "Expander.expand[239-264]", "lineno": 241, "content": "        String targetDirPath = targetDirectory.getCanonicalPath();", "_method_simple_signature": "expand(ArchiveEntrySupplier,EntryWriter,File)", "_file_in_project": "src/main/java/org/apache/commons/compress/archivers/examples/Expander.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.apache.commons.compress.archivers.examples.ExpanderTest::fileCantEscapeDoubleDotPathWithSimilarSibling"], "bug_method": "    private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n        throws IOException {\n        String targetDirPath = targetDirectory.getCanonicalPath();\n        ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n        while (nextEntry != null) {\n            File f = new File(targetDirectory, nextEntry.getName());\n            if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n                throw new IOException(\"expanding \" + nextEntry.getName()\n                    + \" would create file outside of \" + targetDirectory);\n            }\n            if (nextEntry.isDirectory()) {\n                if (!f.isDirectory() && !f.mkdirs()) {\n                    throw new IOException(\"failed to create directory \" + f);\n                }\n            } else {\n                File parent = f.getParentFile();\n                if (!parent.isDirectory() && !parent.mkdirs()) {\n                    throw new IOException(\"failed to create directory \" + parent);\n                }\n                try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                    writer.writeEntryDataTo(nextEntry, o);\n                }\n            }\n            nextEntry = supplier.getNextReadableEntry();\n        }\n    }", "fixed_method": "    private void expand(ArchiveEntrySupplier supplier, EntryWriter writer, File targetDirectory)\n        throws IOException {\n        String targetDirPath = targetDirectory.getCanonicalPath() + File.separatorChar;\n        ArchiveEntry nextEntry = supplier.getNextReadableEntry();\n        while (nextEntry != null) {\n            File f = new File(targetDirectory, nextEntry.getName());\n            if (!f.getCanonicalPath().startsWith(targetDirPath)) {\n                throw new IOException(\"expanding \" + nextEntry.getName()\n                    + \" would create file outside of \" + targetDirectory);\n            }\n            if (nextEntry.isDirectory()) {\n                if (!f.isDirectory() && !f.mkdirs()) {\n                    throw new IOException(\"failed to create directory \" + f);\n                }\n            } else {\n                File parent = f.getParentFile();\n                if (!parent.isDirectory() && !parent.mkdirs()) {\n                    throw new IOException(\"failed to create directory \" + parent);\n                }\n                try (OutputStream o = Files.newOutputStream(f.toPath())) {\n                    writer.writeEntryDataTo(nextEntry, o);\n                }\n            }\n            nextEntry = supplier.getNextReadableEntry();\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-5", "cve_id": "APACHE-COMMONS-001", "cwe_id": "Not Mapping", "project": ["apache_commons-compress"], "project_url": "https://github.com/apache/commons-compress", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.archivers.examples.ExpanderTest#fileCantEscapeDoubleDotPathWithSimilarSibling", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "a080293da69f3fe3d11d5214432e1469ee195870", "human_patch_url": "https://github.com/apache/commons-compress/commit/a080293da69f3fe3d11d5214432e1469ee195870", "failing_tests": ["org.apache.commons.compress.archivers.examples.ExpanderTest#fileCantEscapeDoubleDotPathWithSimilarSibling"], "warning": [""]}, "_vul4j_detailed_info": {"no": "5", "vul_id": "VUL4J-5", "cve_id": "APACHE-COMMONS-001", "cwe_id": "Not Mapping", "cwe_name": "Not Mapping", "owasp_id": "none", "repo_slug": "apache/commons-compress", "human_patch": "https://github.com/apache/commons-compress/commit/a080293da69f3fe3d11d5214432e1469ee195870", "build_system": "Maven", "compliance_level": "7", "failing_tests": "org.apache.commons.compress.archivers.examples.ExpanderTest#fileCantEscapeDoubleDotPathWithSimilarSibling", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.archivers.examples.ExpanderTest#fileCantEscapeDoubleDotPathWithSimilarSibling", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-6", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java", "method": "X0017_StrongEncryptionHeader.parseCentralDirectoryFormat[302-319]", "lineno": 313, "content": "            for (int i = 0; i < this.rcount; i++) {", "_method_simple_signature": "parseCentralDirectoryFormat(byte[],int,int)", "_file_in_project": "src/main/java/org/apache/commons/compress/archivers/zip/X0017_StrongEncryptionHeader.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.apache.commons.compress.Test_CVE_2018_1324::testCVE_2018_1324"], "bug_method": "    public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n        this.format = ZipShort.getValue(data, offset);\n        this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n        this.bitlen = ZipShort.getValue(data, offset + 4);\n        this.flags = ZipShort.getValue(data, offset + 6);\n        this.rcount = ZipLong.getValue(data, offset + 8);\n\n        if (rcount > 0) {\n            this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n            this.hashSize = ZipShort.getValue(data, offset + 14);\n            // srlist... hashed public keys\n            for (int i = 0; i < this.rcount; i++) {\n                for (int j = 0; j < this.hashSize; j++) {\n                    //  ZipUtil.signedByteToUnsignedInt(data[offset + 16 + (i * this.hashSize) + j]));\n                }\n            }\n        }\n    }", "fixed_method": "    public void parseCentralDirectoryFormat(final byte[] data, final int offset, final int length) {\n        this.format = ZipShort.getValue(data, offset);\n        this.algId = EncryptionAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 2));\n        this.bitlen = ZipShort.getValue(data, offset + 4);\n        this.flags = ZipShort.getValue(data, offset + 6);\n        this.rcount = ZipLong.getValue(data, offset + 8);\n\n        if (rcount > 0) {\n            this.hashAlg = HashAlgorithm.getAlgorithmByCode(ZipShort.getValue(data, offset + 12));\n            this.hashSize = ZipShort.getValue(data, offset + 14);\n            // srlist... hashed public keys\n            for (long i = 0; i < this.rcount; i++) {\n                for (int j = 0; j < this.hashSize; j++) {\n                    //  ZipUtil.signedByteToUnsignedInt(data[offset + 16 + (i * this.hashSize) + j]));\n                }\n            }\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-6", "cve_id": "CVE-2018-1324", "cwe_id": "CWE-835", "project": ["apache_commons-compress"], "project_url": "https://github.com/apache/commons-compress", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.Test_CVE_2018_1324", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "2a2f1dc48e22a34ddb72321a4db211da91aa933b", "human_patch_url": "https://github.com/apache/commons-compress/commit/2a2f1dc48e22a34ddb72321a4db211da91aa933b", "failing_tests": ["org.apache.commons.compress.Test_CVE_2018_1324#testCVE_2018_1324"], "warning": [""]}, "_vul4j_detailed_info": {"no": "6", "vul_id": "VUL4J-6", "cve_id": "CVE-2018-1324", "cwe_id": "CWE-835", "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "owasp_id": "none", "repo_slug": "apache/commons-compress", "human_patch": "https://github.com/apache/commons-compress/commit/2a2f1dc48e22a34ddb72321a4db211da91aa933b", "build_system": "Maven", "compliance_level": "7", "failing_tests": "org.apache.commons.compress.Test_CVE_2018_1324#testCVE_2018_1324", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.Test_CVE_2018_1324", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-7", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java", "method": "ZipArchiveInputStream.readStored[510-544]", "lineno": 528, "content": "                return -1;", "_method_simple_signature": "readStored(byte[],int,int)", "_file_in_project": "src/main/java/org/apache/commons/compress/archivers/zip/ZipArchiveInputStream.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest::multiByteReadThrowsAtEofForCorruptedStoredEntry", "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest::singleByteReadThrowsAtEofForCorruptedStoredEntry"], "bug_method": "    private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n\n        if (current.hasDataDescriptor) {\n            if (lastStoredEntry == null) {\n                readStoredEntry();\n            }\n            return lastStoredEntry.read(buffer, offset, length);\n        }\n\n        final long csize = current.entry.getSize();\n        if (current.bytesRead >= csize) {\n            return -1;\n        }\n\n        if (buf.position() >= buf.limit()) {\n            buf.position(0);\n            final int l = in.read(buf.array());\n            if (l == -1) {\n                return -1;\n            }\n            buf.limit(l);\n\n            count(l);\n            current.bytesReadFromStream += l;\n        }\n\n        int toRead = Math.min(buf.remaining(), length);\n        if ((csize - current.bytesRead) < toRead) {\n            // if it is smaller than toRead then it fits into an int\n            toRead = (int) (csize - current.bytesRead);\n        }\n        buf.get(buffer, offset, toRead);\n        current.bytesRead += toRead;\n        return toRead;\n    }", "fixed_method": "    private int readStored(final byte[] buffer, final int offset, final int length) throws IOException {\n\n        if (current.hasDataDescriptor) {\n            if (lastStoredEntry == null) {\n                readStoredEntry();\n            }\n            return lastStoredEntry.read(buffer, offset, length);\n        }\n\n        final long csize = current.entry.getSize();\n        if (current.bytesRead >= csize) {\n            return -1;\n        }\n\n        if (buf.position() >= buf.limit()) {\n            buf.position(0);\n            final int l = in.read(buf.array());\n            if (l == -1) {\n                buf.limit(0);\n                throw new IOException(\"Truncated ZIP file\");\n            }\n            buf.limit(l);\n\n            count(l);\n            current.bytesReadFromStream += l;\n        }\n\n        int toRead = Math.min(buf.remaining(), length);\n        if ((csize - current.bytesRead) < toRead) {\n            // if it is smaller than toRead then it fits into an int\n            toRead = (int) (csize - current.bytesRead);\n        }\n        buf.get(buffer, offset, toRead);\n        current.bytesRead += toRead;\n        return toRead;\n    }", "_vul4j_info": {"vul_id": "VUL4J-7", "cve_id": "CVE-2018-11771", "cwe_id": "CWE-835", "project": ["apache_commons-compress"], "project_url": "https://github.com/apache/commons-compress", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#singleByteReadThrowsAtEofForCorruptedStoredEntry,org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#multiByteReadThrowsAtEofForCorruptedStoredEntry", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "a41ce6892cb0590b2e658704434ac0dbcb6834c8", "human_patch_url": "https://github.com/apache/commons-compress/commit/a41ce6892cb0590b2e658704434ac0dbcb6834c8", "failing_tests": ["org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#singleByteReadThrowsAtEofForCorruptedStoredEntry", "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#multiByteReadThrowsAtEofForCorruptedStoredEntry"], "warning": [""]}, "_vul4j_detailed_info": {"no": "7", "vul_id": "VUL4J-7", "cve_id": "CVE-2018-11771", "cwe_id": "CWE-835", "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "owasp_id": "none", "repo_slug": "apache/commons-compress", "human_patch": "https://github.com/apache/commons-compress/commit/a41ce6892cb0590b2e658704434ac0dbcb6834c8", "build_system": "Maven", "compliance_level": "7", "failing_tests": "org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#singleByteReadThrowsAtEofForCorruptedStoredEntry,org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#multiByteReadThrowsAtEofForCorruptedStoredEntry", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#singleByteReadThrowsAtEofForCorruptedStoredEntry,org.apache.commons.compress.archivers.zip.ZipArchiveInputStreamTest#multiByteReadThrowsAtEofForCorruptedStoredEntry", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-8", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/commons/compress/archivers/zip/NioZipEncoding.java", "method": "NioZipEncoding.encode[78-124]", "lineno": 115, "content": "__insert__", "_method_simple_signature": "encode(String)", "_file_in_project": "src/main/java/org/apache/commons/compress/archivers/zip/NioZipEncoding.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.apache.commons.compress.archivers.zip.NioZipEncodingTest::partialSurrogatePair"], "bug_method": "    public ByteBuffer encode(final String name) {\n        final CharsetEncoder enc = newEncoder();\n\n        final CharBuffer cb = CharBuffer.wrap(name);\n        CharBuffer tmp = null;\n        ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n\n        while (cb.remaining() > 0) {\n            final CoderResult res = enc.encode(cb, out, false);\n\n            if (res.isUnmappable() || res.isMalformed()) {\n\n                // write the unmappable characters in utf-16\n                // pseudo-URL encoding style to ByteBuffer.\n\n                int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n                if (spaceForSurrogate > out.remaining()) {\n                    // if the destination buffer isn't over sized, assume that the presence of one\n                    // unmappable character makes it likely that there will be more. Find all the\n                    // un-encoded characters and allocate space based on those estimates.\n                    int charCount = 0;\n                    for (int i = cb.position() ; i < cb.limit(); i++) {\n                        charCount += !enc.canEncode(cb.get(i)) ? 6 : 1;\n                    }\n                    int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                    out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n                }\n                if (tmp == null) {\n                    tmp = CharBuffer.allocate(6);\n                }\n                for (int i = 0; i < res.length(); ++i) {\n                    out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n                }\n\n            } else if (res.isOverflow()) {\n                int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n                out = ZipEncodingHelper.growBufferBy(out, increment);\n            }\n        }\n        // tell the encoder we are done\n        enc.encode(cb, out, true);\n        // may have caused underflow, but that's been ignored traditionally\n\n        out.limit(out.position());\n        out.rewind();\n        return out;\n    }", "fixed_method": "    public ByteBuffer encode(final String name) {\n        final CharsetEncoder enc = newEncoder();\n\n        final CharBuffer cb = CharBuffer.wrap(name);\n        CharBuffer tmp = null;\n        ByteBuffer out = ByteBuffer.allocate(estimateInitialBufferSize(enc, cb.remaining()));\n\n        while (cb.remaining() > 0) {\n            final CoderResult res = enc.encode(cb, out, false);\n\n            if (res.isUnmappable() || res.isMalformed()) {\n\n                // write the unmappable characters in utf-16\n                // pseudo-URL encoding style to ByteBuffer.\n\n                int spaceForSurrogate = estimateIncrementalEncodingSize(enc, 6 * res.length());\n                if (spaceForSurrogate > out.remaining()) {\n                    // if the destination buffer isn't over sized, assume that the presence of one\n                    // unmappable character makes it likely that there will be more. Find all the\n                    // un-encoded characters and allocate space based on those estimates.\n                    int charCount = 0;\n                    for (int i = cb.position() ; i < cb.limit(); i++) {\n                        charCount += !enc.canEncode(cb.get(i)) ? 6 : 1;\n                    }\n                    int totalExtraSpace = estimateIncrementalEncodingSize(enc, charCount);\n                    out = ZipEncodingHelper.growBufferBy(out, totalExtraSpace - out.remaining());\n                }\n                if (tmp == null) {\n                    tmp = CharBuffer.allocate(6);\n                }\n                for (int i = 0; i < res.length(); ++i) {\n                    out = encodeFully(enc, encodeSurrogate(tmp, cb.get()), out);\n                }\n\n            } else if (res.isOverflow()) {\n                int increment = estimateIncrementalEncodingSize(enc, cb.remaining());\n                out = ZipEncodingHelper.growBufferBy(out, increment);\n\n            } else if (res.isUnderflow() || res.isError()) {\n                break;\n            }\n        }\n        // tell the encoder we are done\n        enc.encode(cb, out, true);\n        // may have caused underflow, but that's been ignored traditionally\n\n        out.limit(out.position());\n        out.rewind();\n        return out;\n    }", "_vul4j_info": {"vul_id": "VUL4J-8", "cve_id": "CVE-2019-12402", "cwe_id": "CWE-835", "project": ["apache_commons-compress"], "project_url": "https://github.com/apache/commons-compress", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.archivers.zip.NioZipEncodingTest#partialSurrogatePair", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "4ad5d80a6272e007f64a6ac66829ca189a8093b9", "human_patch_url": "https://github.com/apache/commons-compress/commit/4ad5d80a6272e007f64a6ac66829ca189a8093b9", "failing_tests": ["org.apache.commons.compress.archivers.zip.NioZipEncodingTest#partialSurrogatePair"], "warning": [""]}, "_vul4j_detailed_info": {"no": "8", "vul_id": "VUL4J-8", "cve_id": "CVE-2019-12402", "cwe_id": "CWE-835", "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "owasp_id": "none", "repo_slug": "apache/commons-compress", "human_patch": "https://github.com/apache/commons-compress/commit/4ad5d80a6272e007f64a6ac66829ca189a8093b9", "build_system": "Maven", "compliance_level": "7", "failing_tests": "org.apache.commons.compress.archivers.zip.NioZipEncodingTest#partialSurrogatePair", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.compress.archivers.zip.NioZipEncodingTest#partialSurrogatePair", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-10", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/commons/fileupload/disk/DiskFileItem.java", "method": "DiskFileItem.readObject[654-671]", "lineno": 659, "content": "__insert__", "_method_simple_signature": "readObject(ObjectInputStream)", "_file_in_project": "src/main/java/org/apache/commons/fileupload/disk/DiskFileItem.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "_vul4j_provided_but_not_repro__tests.trigger": ["org.apache.commons.fileupload.DiskFileItemSerializeTest::testInvalidRepository", "org.apache.commons.fileupload.DiskFileItemSerializeTest::testInvalidRepositoryWithNullChar"], "tests.trigger": ["org.apache.commons.fileupload.DiskFileItemSerializeTest::testInvalidRepositoryWithNullChar"], "bug_method": "    private void readObject(ObjectInputStream in)\n            throws IOException, ClassNotFoundException {\n        // read values\n        in.defaultReadObject();\n\n        OutputStream output = getOutputStream();\n        if (cachedContent != null) {\n            output.write(cachedContent);\n        } else {\n            FileInputStream input = new FileInputStream(dfosFile);\n            IOUtils.copy(input, output);\n            dfosFile.delete();\n            dfosFile = null;\n        }\n        output.close();\n\n        cachedContent = null;\n    }", "fixed_method": "    private void readObject(ObjectInputStream in)\n            throws IOException, ClassNotFoundException {\n        // read values\n        in.defaultReadObject();\n\n        /* One expected use of serialization is to migrate HTTP sessions\n         * containing a DiskFileItem between JVMs. Particularly if the JVMs are\n         * on different machines It is possible that the repository location is\n         * not valid so validate it.\n         */\n        if (repository != null) {\n            if (repository.isDirectory()) {\n                // Check path for nulls\n                if (repository.getPath().contains(\"\\0\")) {\n                    throw new IOException(format(\n                            \"The repository [%s] contains a null character\",\n                            repository.getPath()));\n                }\n            } else {\n                throw new IOException(format(\n                        \"The repository [%s] is not a directory\",\n                        repository.getAbsolutePath()));\n            }\n        }\n\n        OutputStream output = getOutputStream();\n        if (cachedContent != null) {\n            output.write(cachedContent);\n        } else {\n            FileInputStream input = new FileInputStream(dfosFile);\n            IOUtils.copy(input, output);\n            dfosFile.delete();\n            dfosFile = null;\n        }\n        output.close();\n\n        cachedContent = null;\n    }", "_vul4j_info": {"vul_id": "VUL4J-10", "cve_id": "CVE-2013-2186", "cwe_id": "CWE-20", "project": ["apache_commons-fileupload"], "project_url": "https://github.com/apache/commons-fileupload", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepositoryWithNullChar,org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepository", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "163a6061fbc077d4b6e4787d26857c2baba495d1", "human_patch_url": "https://github.com/apache/commons-fileupload/commit/163a6061fbc077d4b6e4787d26857c2baba495d1", "failing_tests": ["org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepositoryWithNullChar", "org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepository"], "warning": [""]}, "_vul4j_detailed_info": {"no": "10", "vul_id": "VUL4J-10", "cve_id": "CVE-2013-2186", "cwe_id": "CWE-20", "cwe_name": "Improper Input Validation", "owasp_id": "CWE Top 25", "repo_slug": "apache/commons-fileupload", "human_patch": "https://github.com/apache/commons-fileupload/commit/163a6061fbc077d4b6e4787d26857c2baba495d1", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepositoryWithNullChar,org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepository", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepositoryWithNullChar,org.apache.commons.fileupload.DiskFileItemSerializeTest#testInvalidRepository", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-12", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java", "method": "JpegDecoder.extend[400-408]", "lineno": 403, "content": "        while (v < vt) {", "_method_simple_signature": "extend(int,int)", "_file_in_project": "src/main/java/org/apache/commons/imaging/formats/jpeg/decoder/JpegDecoder.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoderTest::testDecodeBadFile"], "bug_method": "    private int extend(int v, final int t) {\n        // \"EXTEND\", section F.2.2.1, figure F.12, page 105 of T.81\n        int vt = (1 << (t - 1));\n        while (v < vt) {\n            vt = (-1 << t) + 1;\n            v += vt;\n        }\n        return v;\n    }", "fixed_method": "    private int extend(int v, final int t) {\n        // \"EXTEND\", section F.2.2.1, figure F.12, page 105 of T.81\n        int vt = (1 << (t - 1));\n        if (v < vt) {\n            vt = (-1 << t) + 1;\n            v += vt;\n        }\n        return v;\n    }", "_vul4j_info": {"vul_id": "VUL4J-12", "cve_id": "CVE-2018-17202", "cwe_id": "CWE-835", "project": ["apache_commons-imaging"], "project_url": "https://github.com/apache/commons-imaging", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoderTest#testDecodeBadFile", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "6a79d35d6654d895d0a4b73b3a9282ec9aaeeb06", "human_patch_url": "https://github.com/apache/commons-imaging/commit/6a79d35d6654d895d0a4b73b3a9282ec9aaeeb06", "failing_tests": ["org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoderTest#testDecodeBadFile"], "warning": [""]}, "_vul4j_detailed_info": {"no": "12", "vul_id": "VUL4J-12", "cve_id": "CVE-2018-17202", "cwe_id": "CWE-835", "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "owasp_id": "none", "repo_slug": "apache/commons-imaging", "human_patch": "https://github.com/apache/commons-imaging/commit/6a79d35d6654d895d0a4b73b3a9282ec9aaeeb06", "build_system": "Maven", "compliance_level": "7", "failing_tests": "org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoderTest#testDecodeBadFile", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.commons.imaging.formats.jpeg.decoder.JpegDecoderTest#testDecodeBadFile", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-18", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/wiki/url/DefaultURLConstructor.java", "method": "DefaultURLConstructor.getForwardPage[278-281]", "lineno": 280, "content": "        return request.getPathInfo();", "_method_simple_signature": "getForwardPage(HttpServletRequest)", "_file_in_project": "jspwiki-main/src/main/java/org/apache/wiki/url/DefaultURLConstructor.java"}], "dir.src.classes": "jspwiki-main/src/main/java", "dir.src.tests": "jspwiki-main/src/test/java", "tests.trigger": ["org.apache.wiki.WikiServletTest::testDoGet", "org.apache.wiki.WikiServletTest::testNastyDoPost"], "bug_method": "    public String getForwardPage( HttpServletRequest request )\n    {\n        return request.getPathInfo();\n    }", "fixed_method": "    public String getForwardPage( HttpServletRequest request )\n    {\n        return \"Wiki.jsp\";\n    }", "_vul4j_info": {"vul_id": "VUL4J-18", "cve_id": "CVE-2019-0225", "cwe_id": "CWE-22", "project": ["apache_jspwiki"], "project_url": "https://github.com/apache/jspwiki", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl jspwiki-main", "test_cmd": "mvn test -pl jspwiki-main -Dtest=org.apache.wiki.WikiServletTest#testNastyDoPost,org.apache.wiki.WikiServletTest#testDoGet", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "jspwiki-main", "fixing_commit_hash": "88d89d6523802c044cfcb7930cba40d8eeb21da2", "human_patch_url": "https://github.com/apache/jspwiki/commit/88d89d6523802c044cfcb7930cba40d8eeb21da2", "failing_tests": ["org.apache.wiki.WikiServletTest#testNastyDoPost", "org.apache.wiki.WikiServletTest#testDoGet"], "warning": [""]}, "_vul4j_detailed_info": {"no": "18", "vul_id": "VUL4J-18", "cve_id": "CVE-2019-0225", "cwe_id": "CWE-22", "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "owasp_id": "A5", "repo_slug": "apache/jspwiki", "human_patch": "https://github.com/apache/jspwiki/commit/88d89d6523802c044cfcb7930cba40d8eeb21da2", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.wiki.WikiServletTest#testNastyDoPost,org.apache.wiki.WikiServletTest#testDoGet", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl jspwiki-main", "test_cmd": "mvn test -pl jspwiki-main -Dtest=org.apache.wiki.WikiServletTest#testNastyDoPost,org.apache.wiki.WikiServletTest#testDoGet", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "jspwiki-main", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-19", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java", "method": "StandardSecurityHandler.prepareForDecryption[167-276]", "lineno": 240, "content": "__insert__", "_method_simple_signature": "prepareForDecryption(PDEncryption,COSArray,DecryptionMaterial)", "_file_in_project": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java"}], "dir.src.classes": "pdfbox/src/main/java", "dir.src.tests": "pdfbox/src/test/java", "tests.trigger": ["org.apache.pdfbox.encryption.TestSymmetricKeyEncryption::testPermissions"], "bug_method": "    public void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                     DecryptionMaterial decryptionMaterial)\n                                     throws IOException\n    {\n        if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n        {\n            throw new IOException(\"Decryption material is not compatible with the document\");\n        }\n        setDecryptMetadata(encryption.isEncryptMetaData());\n        StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n\n        String password = material.getPassword();\n        if(password == null)\n        {\n            password = \"\";\n        }\n\n        int dicPermissions = encryption.getPermissions();\n        int dicRevision = encryption.getRevision();\n        int dicLength = encryption.getVersion() == 1 ? 5 : encryption.getLength() / 8;\n\n        byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n\n        // we need to know whether the meta data was encrypted for password calculation\n        boolean encryptMetadata = encryption.isEncryptMetaData();\n        \n        byte[] userKey = encryption.getUserKey();\n        byte[] ownerKey = encryption.getOwnerKey();\n        byte[] ue = null, oe = null;\n\n        Charset passwordCharset = Charsets.ISO_8859_1;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            passwordCharset = Charsets.UTF_8;\n            ue = encryption.getUserEncryptionKey();\n            oe = encryption.getOwnerEncryptionKey();\n        }\n        \n        AccessPermission currentAccessPermission;\n\n        if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                                 dicPermissions, documentIDBytes, dicRevision,\n                                 dicLength, encryptMetadata) )\n        {\n            currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n            setCurrentAccessPermission(currentAccessPermission);\n            \n            byte[] computedPassword;\n            if (dicRevision == 6 || dicRevision == 5)\n            {\n                computedPassword = password.getBytes(passwordCharset);\n            }\n            else\n            {\n                computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                        ownerKey, dicRevision, dicLength );\n            }\n            \n            encryptionKey =\n                computeEncryptedKey(\n                    computedPassword,\n                    ownerKey, userKey, oe, ue,\n                    dicPermissions,\n                    documentIDBytes,\n                    dicRevision,\n                    dicLength,\n                    encryptMetadata, true );\n        }\n        else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                           dicPermissions, documentIDBytes, dicRevision,\n                           dicLength, encryptMetadata) )\n        {\n            currentAccessPermission = new AccessPermission(dicPermissions);\n            setCurrentAccessPermission(currentAccessPermission);\n            \n            encryptionKey =\n                computeEncryptedKey(\n                    password.getBytes(passwordCharset),\n                    ownerKey, userKey, oe, ue,\n                    dicPermissions,\n                    documentIDBytes,\n                    dicRevision,\n                    dicLength,\n                    encryptMetadata, false );\n        }\n        else\n        {\n            throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n        }\n\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            validatePerms(encryption, dicPermissions, encryptMetadata);\n        }\n\n        if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n        {\n            // detect whether AES encryption is used. This assumes that the encryption algo is \n            // stored in the PDCryptFilterDictionary\n            // However, crypt filters are used only when V is 4 or 5.\n            PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n\n            if (stdCryptFilterDictionary != null)\n            {\n                COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n                setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                       COSName.AESV3.equals(cryptFilterMethod));\n            }\n        }\n    }", "fixed_method": "    public void prepareForDecryption(PDEncryption encryption, COSArray documentIDArray,\n                                     DecryptionMaterial decryptionMaterial)\n                                     throws IOException\n    {\n        if(!(decryptionMaterial instanceof StandardDecryptionMaterial))\n        {\n            throw new IOException(\"Decryption material is not compatible with the document\");\n        }\n        setDecryptMetadata(encryption.isEncryptMetaData());\n        StandardDecryptionMaterial material = (StandardDecryptionMaterial)decryptionMaterial;\n\n        String password = material.getPassword();\n        if(password == null)\n        {\n            password = \"\";\n        }\n\n        int dicPermissions = encryption.getPermissions();\n        int dicRevision = encryption.getRevision();\n        int dicLength = encryption.getVersion() == 1 ? 5 : encryption.getLength() / 8;\n\n        byte[] documentIDBytes = getDocumentIDBytes(documentIDArray);\n\n        // we need to know whether the meta data was encrypted for password calculation\n        boolean encryptMetadata = encryption.isEncryptMetaData();\n        \n        byte[] userKey = encryption.getUserKey();\n        byte[] ownerKey = encryption.getOwnerKey();\n        byte[] ue = null, oe = null;\n\n        Charset passwordCharset = Charsets.ISO_8859_1;\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            passwordCharset = Charsets.UTF_8;\n            ue = encryption.getUserEncryptionKey();\n            oe = encryption.getOwnerEncryptionKey();\n        }\n        \n        AccessPermission currentAccessPermission;\n\n        if( isOwnerPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                                 dicPermissions, documentIDBytes, dicRevision,\n                                 dicLength, encryptMetadata) )\n        {\n            currentAccessPermission = AccessPermission.getOwnerAccessPermission();\n            setCurrentAccessPermission(currentAccessPermission);\n            \n            byte[] computedPassword;\n            if (dicRevision == 6 || dicRevision == 5)\n            {\n                computedPassword = password.getBytes(passwordCharset);\n            }\n            else\n            {\n                computedPassword = getUserPassword(password.getBytes(passwordCharset),\n                        ownerKey, dicRevision, dicLength );\n            }\n            \n            encryptionKey =\n                computeEncryptedKey(\n                    computedPassword,\n                    ownerKey, userKey, oe, ue,\n                    dicPermissions,\n                    documentIDBytes,\n                    dicRevision,\n                    dicLength,\n                    encryptMetadata, true );\n        }\n        else if( isUserPassword(password.getBytes(passwordCharset), userKey, ownerKey,\n                           dicPermissions, documentIDBytes, dicRevision,\n                           dicLength, encryptMetadata) )\n        {\n            currentAccessPermission = new AccessPermission(dicPermissions);\n            currentAccessPermission.setReadOnly();\n            setCurrentAccessPermission(currentAccessPermission);\n            \n            encryptionKey =\n                computeEncryptedKey(\n                    password.getBytes(passwordCharset),\n                    ownerKey, userKey, oe, ue,\n                    dicPermissions,\n                    documentIDBytes,\n                    dicRevision,\n                    dicLength,\n                    encryptMetadata, false );\n        }\n        else\n        {\n            throw new InvalidPasswordException(\"Cannot decrypt PDF, the password is incorrect\");\n        }\n\n        if (dicRevision == 6 || dicRevision == 5)\n        {\n            validatePerms(encryption, dicPermissions, encryptMetadata);\n        }\n\n        if (encryption.getVersion() == 4 || encryption.getVersion() == 5)\n        {\n            // detect whether AES encryption is used. This assumes that the encryption algo is \n            // stored in the PDCryptFilterDictionary\n            // However, crypt filters are used only when V is 4 or 5.\n            PDCryptFilterDictionary stdCryptFilterDictionary = encryption.getStdCryptFilterDictionary();\n\n            if (stdCryptFilterDictionary != null)\n            {\n                COSName cryptFilterMethod = stdCryptFilterDictionary.getCryptFilterMethod();\n                setAES(COSName.AESV2.equals(cryptFilterMethod) || \n                       COSName.AESV3.equals(cryptFilterMethod));\n            }\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-19", "cve_id": "PDFBOX-3341", "cwe_id": "Not Mapping", "project": ["apache_pdfbox"], "project_url": "https://github.com/apache/pdfbox", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl pdfbox", "test_cmd": "mvn test -pl pdfbox -Dtest=org.apache.pdfbox.encryption.TestSymmetricKeyEncryption", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "pdfbox", "fixing_commit_hash": "c90825da4d28d7b1ae9b1484b9a010206be3dec5", "human_patch_url": "https://github.com/bqcuong/vul4j/commit/c90825da4d28d7b1ae9b1484b9a010206be3dec5", "failing_tests": ["org.apache.pdfbox.encryption.TestSymmetricKeyEncryption#testPermissions"], "warning": [""]}, "_vul4j_detailed_info": {"no": "19", "vul_id": "VUL4J-19", "cve_id": "PDFBOX-3341", "cwe_id": "Not Mapping", "cwe_name": "Not Mapping", "owasp_id": "none", "repo_slug": "apache/pdfbox", "human_patch": "https://github.com/bqcuong/vul4j/commit/c90825da4d28d7b1ae9b1484b9a010206be3dec5", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.pdfbox.encryption.TestSymmetricKeyEncryption#testPermissions", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl pdfbox", "test_cmd": "mvn test -pl pdfbox -Dtest=org.apache.pdfbox.encryption.TestSymmetricKeyEncryption", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "pdfbox", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-20", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/pdfbox/cos/COSArray.java", "method": "COSArray.toFloatArray[534-542]", "lineno": 539, "content": "            retval[i] = ((COSNumber)getObject( i )).floatValue();", "_method_simple_signature": "toFloatArray()", "_file_in_project": "pdfbox/src/main/java/org/apache/pdfbox/cos/COSArray.java"}], "dir.src.classes": "pdfbox/src/main/java", "dir.src.tests": "pdfbox/src/test/java", "tests.trigger": ["org.apache.pdfbox.pdmodel.TestPDDocument::testCVE_2018_11797"], "bug_method": "    public float[] toFloatArray()\n    {\n        float[] retval = new float[size()];\n        for (int i = 0; i < size(); i++)\n        {\n            retval[i] = ((COSNumber)getObject( i )).floatValue();\n        }\n        return retval;\n    }", "fixed_method": "    public float[] toFloatArray()\n    {\n        float[] retval = new float[size()];\n        for (int i = 0; i < size(); i++)\n        {\n            COSBase base = getObject(i);\n            retval[i] =\n                base instanceof COSNumber ? ((COSNumber) base).floatValue() : 0;\n        }\n        return retval;\n    }", "_vul4j_info": {"vul_id": "VUL4J-20", "cve_id": "CVE-2018-11797", "cwe_id": "Not Mapping", "project": ["apache_pdfbox"], "project_url": "https://github.com/apache/pdfbox", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl pdfbox", "test_cmd": "mvn test -pl pdfbox -Dtest=org.apache.pdfbox.pdmodel.TestPDDocument#testCVE_2018_11797", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "pdfbox", "fixing_commit_hash": "0e14d6a42cc965e23bb1b40f04b4c002dc173b88", "human_patch_url": "https://github.com/apache/pdfbox/commit/0e14d6a42cc965e23bb1b40f04b4c002dc173b88", "failing_tests": ["org.apache.pdfbox.pdmodel.TestPDDocument#testCVE_2018_11797"], "warning": [""]}, "_vul4j_detailed_info": {"no": "20", "vul_id": "VUL4J-20", "cve_id": "CVE-2018-11797", "cwe_id": "Not Mapping", "cwe_name": "Not Mapping", "owasp_id": "none", "repo_slug": "apache/pdfbox", "human_patch": "https://github.com/apache/pdfbox/commit/0e14d6a42cc965e23bb1b40f04b4c002dc173b88", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.pdfbox.pdmodel.TestPDDocument#testCVE_2018_11797", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl pdfbox", "test_cmd": "mvn test -pl pdfbox -Dtest=org.apache.pdfbox.pdmodel.TestPDDocument#testCVE_2018_11797", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "pdfbox", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-22", "bid": 0, "num_buggy_lines": 3, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/shiro/web/util/WebUtils.java", "method": "WebUtils.getContextPath[246-256]", "lineno": 251, "content": "__insert__", "_method_simple_signature": "getContextPath(HttpServletRequest)", "_file_in_project": "web/src/main/java/org/apache/shiro/web/util/WebUtils.java"}, {"file": "org/apache/shiro/web/util/WebUtils.java", "method": "WebUtils.getContextPath[246-256]", "lineno": 252, "content": "            // Invalid case, but happens for includes on Jetty: silently adapt it.", "_method_simple_signature": "getContextPath(HttpServletRequest)", "_file_in_project": "web/src/main/java/org/apache/shiro/web/util/WebUtils.java"}, {"file": "org/apache/shiro/web/util/WebUtils.java", "method": "WebUtils.getContextPath[246-256]", "lineno": 255, "content": "        return decodeRequestString(request, contextPath);", "_method_simple_signature": "getContextPath(HttpServletRequest)", "_file_in_project": "web/src/main/java/org/apache/shiro/web/util/WebUtils.java"}], "dir.src.classes": "web/src/main/java", "dir.src.tests": "web/src/test/groovy", "tests.trigger": ["org.apache.shiro.web.util.WebUtilsTest::testGetContextPath", "org.apache.shiro.web.util.WebUtilsTest::testGetContextPathIncludes", "org.apache.shiro.web.util.WebUtilsTest::testGetPathWithinApplication"], "bug_method": "    public static String getContextPath(HttpServletRequest request) {\n        String contextPath = (String) request.getAttribute(INCLUDE_CONTEXT_PATH_ATTRIBUTE);\n        if (contextPath == null) {\n            contextPath = request.getContextPath();\n        }\n        if (\"/\".equals(contextPath)) {\n            // Invalid case, but happens for includes on Jetty: silently adapt it.\n            contextPath = \"\";\n        }\n        return decodeRequestString(request, contextPath);\n    }", "fixed_method": "    public static String getContextPath(HttpServletRequest request) {\n        String contextPath = (String) request.getAttribute(INCLUDE_CONTEXT_PATH_ATTRIBUTE);\n        if (contextPath == null) {\n            contextPath = request.getContextPath();\n        }\n        contextPath = normalize(decodeRequestString(request, contextPath));\n        if (\"/\".equals(contextPath)) {\n            // the normalize method will return a \"/\" and includes on Jetty, will also be a \"/\".\n            contextPath = \"\";\n        }\n        return contextPath;\n    }", "_vul4j_info": {"vul_id": "VUL4J-22", "cve_id": "CVE-2016-6802", "cwe_id": "CWE-284", "project": ["apache_shiro"], "project_url": "https://github.com/apache/shiro", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl web", "test_cmd": "mvn test -pl web -Dtest=org.apache.shiro.web.util.WebUtilsTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "web", "fixing_commit_hash": "b15ab927709ca18ea4a02538be01919a19ab65af", "human_patch_url": "https://github.com/apache/shiro/commit/b15ab927709ca18ea4a02538be01919a19ab65af", "failing_tests": ["org.apache.shiro.web.util.WebUtilsTest#testGetContextPathIncludes", "org.apache.shiro.web.util.WebUtilsTest#testGetContextPath", "org.apache.shiro.web.util.WebUtilsTest#testGetPathWithinApplication"], "warning": [""]}, "_vul4j_detailed_info": {"no": "22", "vul_id": "VUL4J-22", "cve_id": "CVE-2016-6802", "cwe_id": "CWE-284", "cwe_name": "Improper Access Control", "owasp_id": "A5", "repo_slug": "apache/shiro", "human_patch": "https://github.com/apache/shiro/commit/b15ab927709ca18ea4a02538be01919a19ab65af", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.shiro.web.util.WebUtilsTest#testGetContextPathIncludes,org.apache.shiro.web.util.WebUtilsTest#testGetContextPath,org.apache.shiro.web.util.WebUtilsTest#testGetPathWithinApplication", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl web", "test_cmd": "mvn test -pl web -Dtest=org.apache.shiro.web.util.WebUtilsTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "web", "src": "src/main/java", "test": "src/test/groovy", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-25", "bid": 0, "num_buggy_lines": 27, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 231, "content": "            try {", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 232, "content": "                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 233, "content": "                /*", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 234, "content": "                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 235, "content": "                    commons-text, which is not an OSGi bundle", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 236, "content": "                */", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 237, "content": "                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 238, "content": "                // Percent-encode characters that are not allowed in unquoted", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 239, "content": "                // HTML attributes: \", ', >, <, ` and space. We don't encode =", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 240, "content": "                // since this would break links with query parameters.", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 241, "content": "                String encodedUrl = unescapedURL.replaceAll(\"\\\"\", \"%22\")", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 242, "content": "                        .replaceAll(\"'\", \"%27\")", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 243, "content": "                        .replaceAll(\">\", \"%3E\")", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 244, "content": "                        .replaceAll(\"<\", \"%3C\")", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 245, "content": "                        .replaceAll(\"`\", \"%60\")", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 246, "content": "                        .replaceAll(\" \", \"%20\");", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 247, "content": "                int qMarkIx = encodedUrl.indexOf('?');", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 248, "content": "                if (qMarkIx > 0) {", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 249, "content": "                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\");", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 250, "content": "                }", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 251, "content": "", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 252, "content": "                encodedUrl = mangleNamespaces(encodedUrl);", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 253, "content": "                if (xssFilter.isValidHref(encodedUrl)) {", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 254, "content": "                    return encodedUrl;", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 255, "content": "                }", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 256, "content": "            } catch (UnsupportedEncodingException e) {", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}, {"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.getValidHref[229-262]", "lineno": 257, "content": "                LOGGER.error(\"Unable to decode url: {}.\", url);", "_method_simple_signature": "getValidHref(String)", "_file_in_project": "src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.apache.sling.xss.impl.XSSAPIImplTest::testGetValidHref", "org.apache.sling.xss.impl.XSSAPIImplTest::testGetValidHrefWithoutHrefConfig"], "bug_method": "    public String getValidHref(final String url) {\n        if (StringUtils.isNotEmpty(url)) {\n            try {\n                String unescapedURL = URLDecoder.decode(url, StandardCharsets.UTF_8.name());\n                /*\n                    StringEscapeUtils is deprecated starting with version 3.6 of commons-lang3, however the indicated replacement comes from\n                    commons-text, which is not an OSGi bundle\n                */\n                unescapedURL = StringEscapeUtils.unescapeXml(unescapedURL);\n                // Percent-encode characters that are not allowed in unquoted\n                // HTML attributes: \", ', >, <, ` and space. We don't encode =\n                // since this would break links with query parameters.\n                String encodedUrl = unescapedURL.replaceAll(\"\\\"\", \"%22\")\n                        .replaceAll(\"'\", \"%27\")\n                        .replaceAll(\">\", \"%3E\")\n                        .replaceAll(\"<\", \"%3C\")\n                        .replaceAll(\"`\", \"%60\")\n                        .replaceAll(\" \", \"%20\");\n                int qMarkIx = encodedUrl.indexOf('?');\n                if (qMarkIx > 0) {\n                    encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\");\n                }\n\n                encodedUrl = mangleNamespaces(encodedUrl);\n                if (xssFilter.isValidHref(encodedUrl)) {\n                    return encodedUrl;\n                }\n            } catch (UnsupportedEncodingException e) {\n                LOGGER.error(\"Unable to decode url: {}.\", url);\n            }\n        }\n        // fall through to empty string\n        return \"\";\n    }", "fixed_method": "    public String getValidHref(final String url) {\n        if (StringUtils.isNotEmpty(url)) {\n            // Percent-encode characters that are not allowed in unquoted\n            // HTML attributes: \", ', >, <, ` and space. We don't encode =\n            // since this would break links with query parameters.\n            String encodedUrl = url.replaceAll(\"\\\"\", \"%22\")\n                    .replaceAll(\"'\", \"%27\")\n                    .replaceAll(\">\", \"%3E\")\n                    .replaceAll(\"<\", \"%3C\")\n                    .replaceAll(\"`\", \"%60\")\n                    .replaceAll(\" \", \"%20\");\n            int qMarkIx = encodedUrl.indexOf('?');\n            if (qMarkIx > 0) {\n                encodedUrl = encodedUrl.substring(0, qMarkIx) + encodedUrl.substring(qMarkIx).replaceAll(\":\", \"%3A\");\n            }\n            encodedUrl = mangleNamespaces(encodedUrl);\n            if (xssFilter.isValidHref(encodedUrl)) {\n                return encodedUrl;\n            }\n        }\n        // fall through to empty string\n        return \"\";\n    }", "_vul4j_info": {"vul_id": "VUL4J-25", "cve_id": "CVE-2017-15717", "cwe_id": "CWE-79", "project": ["apache_sling-org-apache-sling-xss"], "project_url": "https://github.com/apache/sling-org-apache-sling-xss", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.sling.xss.impl.XSSAPIImplTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "ec6764d165abc4df8cffd8439761bb2228887db9", "human_patch_url": "https://github.com/apache/sling-org-apache-sling-xss/commit/ec6764d165abc4df8cffd8439761bb2228887db9", "failing_tests": ["org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidHref", "org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidHrefWithoutHrefConfig"], "warning": [""]}, "_vul4j_detailed_info": {"no": "25", "vul_id": "VUL4J-25", "cve_id": "CVE-2017-15717", "cwe_id": "CWE-79", "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp_id": "A7", "repo_slug": "apache/sling-org-apache-sling-xss", "human_patch": "https://github.com/apache/sling-org-apache-sling-xss/commit/ec6764d165abc4df8cffd8439761bb2228887db9", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidHref,org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidHrefWithoutHrefConfig", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.apache.sling.xss.impl.XSSAPIImplTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-26", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "com/opensymphony/xwork2/validator/validators/URLValidator.java", "method": "URLValidator.getUrlRegex[69-90]", "lineno": 84, "content": "                    \")(((\\\\/+([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" +", "_method_simple_signature": "getUrlRegex()", "_file_in_project": "core/src/main/java/com/opensymphony/xwork2/validator/validators/URLValidator.java"}], "dir.src.classes": "core/src/main/java", "dir.src.tests": "core/src/test/java", "tests.trigger": ["com.opensymphony.xwork2.validator.URLValidatorTest::testValidUrlWithDefaultRegex"], "bug_method": "    public String getUrlRegex() {\n        if (StringUtils.isNotEmpty(urlRegexExpression)) {\n            return (String) parse(urlRegexExpression, String.class);\n        } else if (StringUtils.isNotEmpty(urlRegex)) {\n            return urlRegex;\n        } else {\n            return \"^(https?|ftp):\\\\/\\\\/\" +\n                    \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" +\n                    \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" +\n                    \"@)?(#?\" +\n                    \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" +\n                    \"[a-z][a-z0-9-]*[a-z0-9]\" +\n                    \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" +\n                    \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" +\n                    \")(:\\\\d+)?\" +\n                    \")(((\\\\/+([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" +\n                    \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" +\n                    \"?)?)?\" +\n                    \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" +\n                    \"$\";\n        }\n    }", "fixed_method": "    public String getUrlRegex() {\n        if (StringUtils.isNotEmpty(urlRegexExpression)) {\n            return (String) parse(urlRegexExpression, String.class);\n        } else if (StringUtils.isNotEmpty(urlRegex)) {\n            return urlRegex;\n        } else {\n            return \"^(https?|ftp):\\\\/\\\\/\" +\n                    \"(([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+\" +\n                    \"(:([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;\\\\?&=-]|%[0-9a-f]{2})+)?\" +\n                    \"@)?(#?\" +\n                    \")((([a-z0-9]\\\\.|[a-z0-9][a-z0-9-]*[a-z0-9]\\\\.)*\" +\n                    \"[a-z][a-z0-9-]*[a-z0-9]\" +\n                    \"|((\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\\\\.){3}\" +\n                    \"(\\\\d|[1-9]\\\\d|1\\\\d{2}|2[0-4][0-9]|25[0-5])\" +\n                    \")(:\\\\d+)?\" +\n                    \")(((\\\\/{0,1}([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)*\" +\n                    \"(\\\\?([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)\" +\n                    \"?)?)?\" +\n                    \"(#([a-z0-9$_\\\\.\\\\+!\\\\*\\\\'\\\\(\\\\),;:@&=-]|%[0-9a-f]{2})*)?\" +\n                    \"$\";\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-26", "cve_id": "CVE-2016-4465", "cwe_id": "CWE-20", "project": ["apache_struts"], "project_url": "https://github.com/apache/struts", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests -DskipAssembly clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=com.opensymphony.xwork2.validator.URLValidatorTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "fixing_commit_hash": "a0fdca138feec2c2e94eb75ca1f8b76678b4d152", "human_patch_url": "https://github.com/apache/struts/commit/a0fdca138feec2c2e94eb75ca1f8b76678b4d152", "failing_tests": ["com.opensymphony.xwork2.validator.URLValidatorTest#testValidUrlWithDefaultRegex"], "warning": [""]}, "_vul4j_detailed_info": {"no": "26", "vul_id": "VUL4J-26", "cve_id": "CVE-2016-4465", "cwe_id": "CWE-20", "cwe_name": "Improper Input Validation", "owasp_id": "CWE Top 25", "repo_slug": "apache/struts", "human_patch": "https://github.com/apache/struts/commit/a0fdca138feec2c2e94eb75ca1f8b76678b4d152", "build_system": "Maven", "compliance_level": "7", "failing_tests": "com.opensymphony.xwork2.validator.URLValidatorTest#testValidUrlWithDefaultRegex", "compile_cmd": "mvn -DskipTests -DskipAssembly clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=com.opensymphony.xwork2.validator.URLValidatorTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-30", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "com/opensymphony/xwork2/validator/validators/URLValidator.java", "method": "URLValidator.validate[48-61]", "lineno": 58, "content": "        if (!(value.getClass().equals(String.class)) || !Pattern.compile(getUrlRegex(), Pattern.CASE_INSENSITIVE).matcher(String.valueOf(value)).matches()) {", "_method_simple_signature": "validate(Object)", "_file_in_project": "core/src/main/java/com/opensymphony/xwork2/validator/validators/URLValidator.java"}], "dir.src.classes": "core/src/main/java", "dir.src.tests": "core/src/test/java", "tests.trigger": ["com.opensymphony.xwork2.validator.URLValidatorTest::testValidUrl2"], "bug_method": "    public void validate(Object object) throws ValidationException {\n        String fieldName = getFieldName();\n        Object value = this.getFieldValue(fieldName, object);\n\n        // if there is no value - don't do comparison\n        // if a value is required, a required validator should be added to the field\n        if (value == null || value.toString().length() == 0) {\n            return;\n        }\n\n        if (!(value.getClass().equals(String.class)) || !Pattern.compile(getUrlRegex(), Pattern.CASE_INSENSITIVE).matcher(String.valueOf(value)).matches()) {\n            addFieldError(fieldName, object);\n        }\n    }", "fixed_method": "    public void validate(Object object) throws ValidationException {\n        String fieldName = getFieldName();\n        Object value = this.getFieldValue(fieldName, object);\n\n        // if there is no value - don't do comparison\n        // if a value is required, a required validator should be added to the field\n        if (value == null || value.toString().length() == 0) {\n            return;\n        }\n\n        if (!(value.getClass().equals(String.class)) || !Pattern.compile(getUrlRegex(), Pattern.CASE_INSENSITIVE).matcher(String.valueOf(value).trim()).matches()) {\n            addFieldError(fieldName, object);\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-30", "cve_id": "CVE-2016-8738", "cwe_id": "CWE-20", "project": ["apache_struts"], "project_url": "https://github.com/apache/struts", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests -DskipAssembly clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=com.opensymphony.xwork2.validator.URLValidatorTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "fixing_commit_hash": "554b9dddb0fbd1e581ef577dd62a7c22955ad0f6", "human_patch_url": "https://github.com/apache/struts/commit/554b9dddb0fbd1e581ef577dd62a7c22955ad0f6", "failing_tests": ["com.opensymphony.xwork2.validator.URLValidatorTest#testValidUrl2"], "warning": [""]}, "_vul4j_detailed_info": {"no": "30", "vul_id": "VUL4J-30", "cve_id": "CVE-2016-8738", "cwe_id": "CWE-20", "cwe_name": "Improper Input Validation", "owasp_id": "CWE Top 25", "repo_slug": "apache/struts", "human_patch": "https://github.com/apache/struts/commit/554b9dddb0fbd1e581ef577dd62a7c22955ad0f6", "build_system": "Maven", "compliance_level": "7", "failing_tests": "com.opensymphony.xwork2.validator.URLValidatorTest#testValidUrl2", "compile_cmd": "mvn -DskipTests -DskipAssembly clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=com.opensymphony.xwork2.validator.URLValidatorTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-39", "bid": 0, "num_buggy_lines": 6, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java", "method": "UaaAuthenticationDetails.toString[105-123]", "lineno": 116, "content": "        if (sessionId != null) {", "_method_simple_signature": "toString()", "_file_in_project": "server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java"}, {"file": "org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java", "method": "UaaAuthenticationDetails.toString[105-123]", "lineno": 117, "content": "            if (sb.length() > 0) {", "_method_simple_signature": "toString()", "_file_in_project": "server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java"}, {"file": "org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java", "method": "UaaAuthenticationDetails.toString[105-123]", "lineno": 118, "content": "                sb.append(\", \");", "_method_simple_signature": "toString()", "_file_in_project": "server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java"}, {"file": "org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java", "method": "UaaAuthenticationDetails.toString[105-123]", "lineno": 119, "content": "            }", "_method_simple_signature": "toString()", "_file_in_project": "server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java"}, {"file": "org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java", "method": "UaaAuthenticationDetails.toString[105-123]", "lineno": 120, "content": "            sb.append(\"sessionId=\").append(sessionId);", "_method_simple_signature": "toString()", "_file_in_project": "server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java"}, {"file": "org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java", "method": "UaaAuthenticationDetails.toString[105-123]", "lineno": 121, "content": "        }", "_method_simple_signature": "toString()", "_file_in_project": "server/src/main/java/org/cloudfoundry/identity/uaa/authentication/UaaAuthenticationDetails.java"}], "dir.src.classes": "server/src/main/java", "dir.src.tests": "server/src/test/java", "tests.trigger": ["org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests::get_origin_from_request"], "bug_method": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        if (origin != null) {\n            sb.append(\"remoteAddress=\").append(origin);\n        }\n        if (clientId != null) {\n            if (sb.length() > 0) {\n                sb.append(\", \");\n            }\n            sb.append(\"clientId=\").append(clientId);\n        }\n        if (sessionId != null) {\n            if (sb.length() > 0) {\n                sb.append(\", \");\n            }\n            sb.append(\"sessionId=\").append(sessionId);\n        }\n        return sb.toString();\n    }", "fixed_method": "    public String toString() {\n        StringBuilder sb = new StringBuilder();\n        if (origin != null) {\n            sb.append(\"remoteAddress=\").append(origin);\n        }\n        if (clientId != null) {\n            if (sb.length() > 0) {\n                sb.append(\", \");\n            }\n            sb.append(\"clientId=\").append(clientId);\n        }\n        return sb.toString();\n    }", "_vul4j_info": {"vul_id": "VUL4J-39", "cve_id": "CVE-2018-1192", "cwe_id": "CWE-200", "project": ["cloudfoundry_uaa"], "project_url": "https://github.com/cloudfoundry/uaa", "build_system": "Gradle", "compliance_level": "8", "compile_cmd": "./gradlew :cloudfoundry-identity-server:compileTestJava", "test_all_cmd": "./gradlew :cloudfoundry-identity-server:test", "test_cmd": "./gradlew :cloudfoundry-identity-server:test --tests org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "cmd_options": "", "failing_module": "server", "fixing_commit_hash": "a61bfabbad22f646ecf1f00016b448b26a60daf", "human_patch_url": "https://github.com/cloudfoundry/uaa/commit/a61bfabbad22f646ecf1f00016b448b26a60daf", "failing_tests": ["org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests#get_origin_from_request"], "warning": [""]}, "_vul4j_detailed_info": {"no": "39", "vul_id": "VUL4J-39", "cve_id": "CVE-2018-1192", "cwe_id": "CWE-200", "cwe_name": "Exposure of Sensitive Information to an Unauthorized Actor", "owasp_id": "CWE Top 25", "repo_slug": "cloudfoundry/uaa", "human_patch": "https://github.com/cloudfoundry/uaa/commit/a61bfabbad22f646ecf1f00016b448b26a60daf", "build_system": "Gradle", "compliance_level": "8", "failing_tests": "org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests#get_origin_from_request", "compile_cmd": "./gradlew :cloudfoundry-identity-server:compileTestJava", "test_all_cmd": "./gradlew :cloudfoundry-identity-server:test", "test_cmd": "./gradlew :cloudfoundry-identity-server:test --tests org.cloudfoundry.identity.uaa.authentication.event.UserAuthenticationSuccessEventTests", "cmd_options": "", "failing_module": "server", "src": "src/main/java", "test": "src/test/java", "src_classes": "build/classes/main", "test_classes": "build/classes/test", "warning": ""}}, {"pid": "VUL4J-40", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/cloudfoundry/identity/uaa/security/ScimUserSelfUpdateAllowed.java", "method": "ScimUserSelfUpdateAllowed.isAllowed[23-59]", "lineno": 41, "content": "__insert__", "_method_simple_signature": "isAllowed(HttpServletRequest)", "_file_in_project": "server/src/main/java/org/cloudfoundry/identity/uaa/security/ScimUserSelfUpdateAllowed.java"}], "dir.src.classes": "server/src/main/java", "dir.src.tests": "server/src/test/java", "tests.trigger": ["org.cloudfoundry.identity.uaa.security.ScimUserSelfUpdateAllowedTest$WithInternalUserStoreEnabled$WhenAttemptingToUpdateAFieldThatIsNotAllowedToBeUpdated$WhenUpdatingTheEmailField::isNotAllowedToUpdateField"], "bug_method": "    public boolean isAllowed(HttpServletRequest request) throws IOException {\n        String requestBody = IOUtils.toString(request.getReader());\n        ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n\n        String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n        String zoneId = IdentityZoneHolder.get().getId();\n        ScimUser scimUserFromDb;\n\n        try {\n            scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n        } catch (ScimResourceNotFoundException e) {\n            return true;\n        }\n\n        if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n            return false;\n        }\n\n        if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n            return false;\n        }\n\n        if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n            return false;\n        }\n\n        if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n            return false;\n        }\n\n        if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n            return false;\n        }\n\n\n        return true;\n    }", "fixed_method": "    public boolean isAllowed(HttpServletRequest request) throws IOException {\n        String requestBody = IOUtils.toString(request.getReader());\n        ScimUser scimUserFromRequest = JsonUtils.readValue(requestBody, ScimUser.class);\n\n        String id = UaaUrlUtils.extractPathVariableFromUrl(USER_ID_PATH_PARAMETER_INDEX, UaaUrlUtils.getRequestPath(request));\n        String zoneId = IdentityZoneHolder.get().getId();\n        ScimUser scimUserFromDb;\n\n        try {\n            scimUserFromDb = scimUserProvisioning.retrieve(id, zoneId);\n        } catch (ScimResourceNotFoundException e) {\n            return true;\n        }\n\n        if (!scimUserFromDb.getPrimaryEmail().equals(scimUserFromRequest.getPrimaryEmail())) {\n            return false;\n        }\n\n        if (!scimUserFromDb.getEmails().containsAll(scimUserFromRequest.getEmails())) {\n            return false;\n        }\n\n        if (!scimUserFromDb.getUserName().equals(scimUserFromRequest.getUserName())) {\n            return false;\n        }\n\n        if (scimUserFromDb.isVerified() != scimUserFromRequest.isVerified()) {\n            return false;\n        }\n\n        if (scimUserFromDb.isActive() != (scimUserFromRequest.isActive())) {\n            return false;\n        }\n\n        if (!scimUserFromDb.getOrigin().equals(scimUserFromRequest.getOrigin())) {\n            return false;\n        }\n\n\n        return true;\n    }", "_vul4j_info": {"vul_id": "VUL4J-40", "cve_id": "CVE-2019-3775", "cwe_id": "CWE-287", "project": ["cloudfoundry_uaa"], "project_url": "https://github.com/cloudfoundry/uaa", "build_system": "Gradle", "compliance_level": "8", "compile_cmd": "./gradlew :cloudfoundry-identity-server:compileTestJava", "test_all_cmd": "./gradlew :cloudfoundry-identity-server:test", "test_cmd": "./gradlew :cloudfoundry-identity-server:test --tests org.cloudfoundry.identity.uaa.security.ScimUserSelfUpdateAllowedTest", "cmd_options": "", "failing_module": "server", "fixing_commit_hash": "daeedbe499453b06856556f5e9f7e80d2d1ceb03", "human_patch_url": "https://github.com/cloudfoundry/uaa/commit/daeedbe499453b06856556f5e9f7e80d2d1ceb03", "failing_tests": ["org.cloudfoundry.identity.uaa.security.ScimUserSelfUpdateAllowedTest$WithInternalUserStoreEnabled$WhenAttemptingToUpdateAFieldThatIsNotAllowedToBeUpdated$WhenUpdatingTheEmailField#isNotAllowedToUpdateField"], "warning": [""]}, "_vul4j_detailed_info": {"no": "40", "vul_id": "VUL4J-40", "cve_id": "CVE-2019-3775", "cwe_id": "CWE-287", "cwe_name": "Improper Authentication", "owasp_id": "A2", "repo_slug": "cloudfoundry/uaa", "human_patch": "https://github.com/cloudfoundry/uaa/commit/daeedbe499453b06856556f5e9f7e80d2d1ceb03", "build_system": "Gradle", "compliance_level": "8", "failing_tests": "org.cloudfoundry.identity.uaa.security.ScimUserSelfUpdateAllowedTest$WithInternalUserStoreEnabled$WhenAttemptingToUpdateAFieldThatIsNotAllowedToBeUpdated$WhenUpdatingTheEmailField#isNotAllowedToUpdateField", "compile_cmd": "./gradlew :cloudfoundry-identity-server:compileTestJava", "test_all_cmd": "./gradlew :cloudfoundry-identity-server:test", "test_cmd": "./gradlew :cloudfoundry-identity-server:test --tests org.cloudfoundry.identity.uaa.security.ScimUserSelfUpdateAllowedTest", "cmd_options": "", "failing_module": "server", "src": "src/main/java", "test": "src/test/java", "src_classes": "build/classes/java/main", "test_classes": "build/classes/java/test", "warning": ""}}, {"pid": "VUL4J-41", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/codehaus/plexus/archiver/AbstractUnArchiver.java", "method": "AbstractUnArchiver.extractFile[303-361]", "lineno": 311, "content": "__insert__", "_method_simple_signature": "extractFile(File,File,InputStream,String,Date,boolean,Integer,String)", "_file_in_project": "src/main/java/org/codehaus/plexus/archiver/AbstractUnArchiver.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.codehaus.plexus.archiver.zip.ZipUnArchiverTest::testExtractingZipWithEntryOutsideDestDirThrowsException"], "bug_method": "    protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                                final String entryName, final Date entryDate, final boolean isDirectory,\n                                final Integer mode, String symlinkDestination )\n        throws IOException, ArchiverException\n    {\n        // Hmm. Symlinks re-evaluate back to the original file here. Unsure if this is a good thing...\n        final File f = FileUtils.resolveFile( dir, entryName );\n\n        try\n        {\n            if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n            {\n                return;\n            }\n\n            // create intermediary directories - sometimes zip don't add them\n            final File dirF = f.getParentFile();\n            if ( dirF != null )\n            {\n                dirF.mkdirs();\n            }\n\n            if ( !StringUtils.isEmpty( symlinkDestination ) )\n            {\n                SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n            }\n            else if ( isDirectory )\n            {\n                f.mkdirs();\n            }\n            else\n            {\n                OutputStream out = null;\n                try\n                {\n                    out = new FileOutputStream( f );\n\n                    IOUtil.copy( compressedInputStream, out );\n                    out.close();\n                    out = null;\n                }\n                finally\n                {\n                    IOUtil.close( out );\n                }\n            }\n\n            f.setLastModified( entryDate.getTime() );\n\n            if ( !isIgnorePermissions() && mode != null && !isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }\n        catch ( final FileNotFoundException ex )\n        {\n            getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n        }\n    }", "fixed_method": "    protected void extractFile( final File srcF, final File dir, final InputStream compressedInputStream,\n                                final String entryName, final Date entryDate, final boolean isDirectory,\n                                final Integer mode, String symlinkDestination )\n        throws IOException, ArchiverException\n    {\n        // Hmm. Symlinks re-evaluate back to the original file here. Unsure if this is a good thing...\n        final File f = FileUtils.resolveFile( dir, entryName );\n\n        // Make sure that the resolved path of the extracted file doesn't escape the destination directory\n        String canonicalDirPath = dir.getCanonicalPath();\n        String canonicalDestPath = f.getCanonicalPath();\n\n        if ( !canonicalDestPath.startsWith( canonicalDirPath ) )\n        {\n            throw new ArchiverException( \"Entry is outside of the target directory (\" + entryName + \")\" );\n        }\n\n        try\n        {\n            if ( !isOverwrite() && f.exists() && ( f.lastModified() >= entryDate.getTime() ) )\n            {\n                return;\n            }\n\n            // create intermediary directories - sometimes zip don't add them\n            final File dirF = f.getParentFile();\n            if ( dirF != null )\n            {\n                dirF.mkdirs();\n            }\n\n            if ( !StringUtils.isEmpty( symlinkDestination ) )\n            {\n                SymlinkUtils.createSymbolicLink( f, new File( symlinkDestination ) );\n            }\n            else if ( isDirectory )\n            {\n                f.mkdirs();\n            }\n            else\n            {\n                OutputStream out = null;\n                try\n                {\n                    out = new FileOutputStream( f );\n\n                    IOUtil.copy( compressedInputStream, out );\n                    out.close();\n                    out = null;\n                }\n                finally\n                {\n                    IOUtil.close( out );\n                }\n            }\n\n            f.setLastModified( entryDate.getTime() );\n\n            if ( !isIgnorePermissions() && mode != null && !isDirectory )\n            {\n                ArchiveEntryUtils.chmod( f, mode );\n            }\n        }\n        catch ( final FileNotFoundException ex )\n        {\n            getLogger().warn( \"Unable to expand to file \" + f.getPath() );\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-41", "cve_id": "CVE-2018-1002200", "cwe_id": "CWE-22", "project": ["codehaus-plexus_plexus-archiver"], "project_url": "https://github.com/codehaus-plexus/plexus-archiver", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.codehaus.plexus.archiver.zip.ZipUnArchiverTest#testExtractingZipWithEntryOutsideDestDirThrowsException", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "58bc24e465c0842981692adbf6d75680298989de", "human_patch_url": "https://github.com/codehaus-plexus/plexus-archiver/commit/58bc24e465c0842981692adbf6d75680298989de", "failing_tests": ["org.codehaus.plexus.archiver.zip.ZipUnArchiverTest#testExtractingZipWithEntryOutsideDestDirThrowsException"], "warning": [""]}, "_vul4j_detailed_info": {"no": "41", "vul_id": "VUL4J-41", "cve_id": "CVE-2018-1002200", "cwe_id": "CWE-22", "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "owasp_id": "A5", "repo_slug": "codehaus-plexus/plexus-archiver", "human_patch": "https://github.com/codehaus-plexus/plexus-archiver/commit/58bc24e465c0842981692adbf6d75680298989de", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.codehaus.plexus.archiver.zip.ZipUnArchiverTest#testExtractingZipWithEntryOutsideDestDirThrowsException", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.codehaus.plexus.archiver.zip.ZipUnArchiverTest#testExtractingZipWithEntryOutsideDestDirThrowsException", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-46", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "com/fasterxml/jackson/dataformat/xml/XmlFactory.java", "method": "XmlFactory.XmlFactory[104-121]", "lineno": 114, "content": "__insert__", "_method_simple_signature": "XmlFactory(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)", "_file_in_project": "src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["com.fasterxml.jackson.dataformat.xml.TestCVE_2016_3720::testCVE_2016_3720"], "bug_method": "    protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n            XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n            String nameForTextElem)\n    {\n        super(oc);\n        _xmlParserFeatures = xpFeatures;\n        _xmlGeneratorFeatures = xgFeatures;\n        _cfgNameForTextElement = nameForTextElem;\n        if (xmlIn == null) {\n            xmlIn = XMLInputFactory.newInstance();\n        }\n        if (xmlOut == null) {\n            xmlOut = XMLOutputFactory.newInstance();\n        }\n        _initFactories(xmlIn, xmlOut);\n        _xmlInputFactory = xmlIn;\n        _xmlOutputFactory = xmlOut;\n    }", "fixed_method": "    protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n            XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n            String nameForTextElem)\n    {\n        super(oc);\n        _xmlParserFeatures = xpFeatures;\n        _xmlGeneratorFeatures = xgFeatures;\n        _cfgNameForTextElement = nameForTextElem;\n        if (xmlIn == null) {\n            xmlIn = XMLInputFactory.newInstance();\n            // as per [dataformat-xml#190], disable external entity expansion by default\n            xmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\n        }\n        if (xmlOut == null) {\n            xmlOut = XMLOutputFactory.newInstance();\n        }\n        _initFactories(xmlIn, xmlOut);\n        _xmlInputFactory = xmlIn;\n        _xmlOutputFactory = xmlOut;\n    }", "_vul4j_info": {"vul_id": "VUL4J-46", "cve_id": "CVE-2016-3720", "cwe_id": "Not Mapping", "project": ["FasterXML_jackson-dataformat-xml"], "project_url": "https://github.com/FasterXML/jackson-dataformat-xml", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=com.fasterxml.jackson.dataformat.xml.TestCVE_2016_3720", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "f0f19a4c924d9db9a1e2830434061c8640092cc0", "human_patch_url": "https://github.com/FasterXML/jackson-dataformat-xml/commit/f0f19a4c924d9db9a1e2830434061c8640092cc0", "failing_tests": ["com.fasterxml.jackson.dataformat.xml.TestCVE_2016_3720#testCVE_2016_3720"], "warning": [""]}, "_vul4j_detailed_info": {"no": "46", "vul_id": "VUL4J-46", "cve_id": "CVE-2016-3720", "cwe_id": "Not Mapping", "cwe_name": "Not Mapping", "owasp_id": "none", "repo_slug": "FasterXML/jackson-dataformat-xml", "human_patch": "https://github.com/FasterXML/jackson-dataformat-xml/commit/f0f19a4c924d9db9a1e2830434061c8640092cc0", "build_system": "Maven", "compliance_level": "7", "failing_tests": "com.fasterxml.jackson.dataformat.xml.TestCVE_2016_3720#testCVE_2016_3720", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=com.fasterxml.jackson.dataformat.xml.TestCVE_2016_3720", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-47", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "com/fasterxml/jackson/dataformat/xml/XmlFactory.java", "method": "XmlFactory.XmlFactory[104-123]", "lineno": 116, "content": "__insert__", "_method_simple_signature": "XmlFactory(ObjectCodec,int,int,XMLInputFactory,XMLOutputFactory,String)", "_file_in_project": "src/main/java/com/fasterxml/jackson/dataformat/xml/XmlFactory.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["com.fasterxml.jackson.dataformat.xml.SupportDTDDefaultsTest::testDTDAttempt"], "bug_method": "    protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n            XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n            String nameForTextElem)\n    {\n        super(oc);\n        _xmlParserFeatures = xpFeatures;\n        _xmlGeneratorFeatures = xgFeatures;\n        _cfgNameForTextElement = nameForTextElem;\n        if (xmlIn == null) {\n            xmlIn = XMLInputFactory.newInstance();\n            // as per [dataformat-xml#190], disable external entity expansion by default\n            xmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\n        }\n        if (xmlOut == null) {\n            xmlOut = XMLOutputFactory.newInstance();\n        }\n        _initFactories(xmlIn, xmlOut);\n        _xmlInputFactory = xmlIn;\n        _xmlOutputFactory = xmlOut;\n    }", "fixed_method": "    protected XmlFactory(ObjectCodec oc, int xpFeatures, int xgFeatures,\n            XMLInputFactory xmlIn, XMLOutputFactory xmlOut,\n            String nameForTextElem)\n    {\n        super(oc);\n        _xmlParserFeatures = xpFeatures;\n        _xmlGeneratorFeatures = xgFeatures;\n        _cfgNameForTextElement = nameForTextElem;\n        if (xmlIn == null) {\n            xmlIn = XMLInputFactory.newInstance();\n            // as per [dataformat-xml#190], disable external entity expansion by default\n            xmlIn.setProperty(XMLInputFactory.IS_SUPPORTING_EXTERNAL_ENTITIES, Boolean.FALSE);\n            // and ditto wrt [dataformat-xml#211], SUPPORT_DTD\n            xmlIn.setProperty(XMLInputFactory.SUPPORT_DTD, Boolean.FALSE);\n        }\n        if (xmlOut == null) {\n            xmlOut = XMLOutputFactory.newInstance();\n        }\n        _initFactories(xmlIn, xmlOut);\n        _xmlInputFactory = xmlIn;\n        _xmlOutputFactory = xmlOut;\n    }", "_vul4j_info": {"vul_id": "VUL4J-47", "cve_id": "CVE-2016-7051", "cwe_id": "CWE-611", "project": ["FasterXML_jackson-dataformat-xml"], "project_url": "https://github.com/FasterXML/jackson-dataformat-xml", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=com.fasterxml.jackson.dataformat.xml.SupportDTDDefaultsTest#testDTDAttempt", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "eeff2c312e9d4caa8c9f27b8f740c7529d00524a", "human_patch_url": "https://github.com/FasterXML/jackson-dataformat-xml/commit/eeff2c312e9d4caa8c9f27b8f740c7529d00524a", "failing_tests": ["com.fasterxml.jackson.dataformat.xml.SupportDTDDefaultsTest#testDTDAttempt"], "warning": [""]}, "_vul4j_detailed_info": {"no": "47", "vul_id": "VUL4J-47", "cve_id": "CVE-2016-7051", "cwe_id": "CWE-611", "cwe_name": "Improper Restriction of XML External Entity Reference", "owasp_id": "A4", "repo_slug": "FasterXML/jackson-dataformat-xml", "human_patch": "https://github.com/FasterXML/jackson-dataformat-xml/commit/eeff2c312e9d4caa8c9f27b8f740c7529d00524a", "build_system": "Maven", "compliance_level": "7", "failing_tests": "com.fasterxml.jackson.dataformat.xml.SupportDTDDefaultsTest#testDTDAttempt", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=com.fasterxml.jackson.dataformat.xml.SupportDTDDefaultsTest#testDTDAttempt", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-50", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "net/bull/javamelody/HtmlSessionInformationsReport.java", "method": "HtmlSessionInformationsReport.writeSession[131-184]", "lineno": 162, "content": "\t\t\twrite(remoteAddr);", "_method_simple_signature": "writeSession(SessionInformations,boolean)", "_file_in_project": "javamelody-core/src/main/java/net/bull/javamelody/HtmlSessionInformationsReport.java"}], "dir.src.classes": "javamelody-core/src/main/java", "dir.src.tests": "javamelody-core/src/test/java", "tests.trigger": ["net.bull.javamelody.TestHtmlSessionInformationsReport::testCVE_2013_4378"], "bug_method": "\tprivate void writeSession(SessionInformations session, boolean displayUser) throws IOException {\n\t\tfinal String nextColumnAlignRight = \"</td><td align='right'>\";\n\t\tfinal String nextColumnAlignCenter = \"</td><td align='center'>\";\n\t\twrite(\"<td><a href='?part=sessions&amp;sessionId=\");\n\t\twrite(htmlEncodeButNotSpace(session.getId()));\n\t\twrite(\"'>\");\n\t\twrite(htmlEncodeButNotSpace(session.getId()));\n\t\twrite(\"</a>\");\n\t\twrite(nextColumnAlignRight);\n\t\twrite(durationFormat.format(session.getLastAccess()));\n\t\twrite(nextColumnAlignRight);\n\t\twrite(durationFormat.format(session.getAge()));\n\t\twrite(nextColumnAlignRight);\n\t\twrite(expiryFormat.format(session.getExpirationDate()));\n\n\t\twrite(nextColumnAlignRight);\n\t\twrite(integerFormat.format(session.getAttributeCount()));\n\t\twrite(nextColumnAlignCenter);\n\t\tif (session.isSerializable()) {\n\t\t\twrite(\"#oui#\");\n\t\t} else {\n\t\t\twrite(\"<span class='severe'>#non#</span>\");\n\t\t}\n\t\twrite(nextColumnAlignRight);\n\t\twrite(integerFormat.format(session.getSerializedSize()));\n\t\tfinal String nextColumn = \"</td><td>\";\n\t\twrite(nextColumn);\n\t\tfinal String remoteAddr = session.getRemoteAddr();\n\t\tif (remoteAddr == null) {\n\t\t\twrite(\"&nbsp;\");\n\t\t} else {\n\t\t\twrite(remoteAddr);\n\t\t}\n\t\twrite(nextColumnAlignCenter);\n\t\twriteCountry(session);\n\t\tif (displayUser) {\n\t\t\twrite(nextColumn);\n\t\t\tfinal String remoteUser = session.getRemoteUser();\n\t\t\tif (remoteUser == null) {\n\t\t\t\twrite(\"&nbsp;\");\n\t\t\t} else {\n\t\t\t\twriteDirectly(htmlEncodeButNotSpace(remoteUser));\n\t\t\t}\n\t\t}\n\t\twrite(\"</td><td align='center' class='noPrint'>\");\n\t\twrite(A_HREF_PART_SESSIONS);\n\t\twrite(\"&amp;action=invalidate_session&amp;sessionId=\");\n\t\twrite(urlEncode(session.getId()));\n\t\twrite(\"' onclick=\\\"javascript:return confirm('\"\n\t\t\t\t+ getStringForJavascript(\"confirm_invalidate_session\") + \"');\\\">\");\n\t\twrite(\"<img width='16' height='16' src='?resource=user-trash.png' alt='#invalidate_session#' title='#invalidate_session#' />\");\n\t\twrite(\"</a>\");\n\t\twrite(\"</td>\");\n\t}", "fixed_method": "\tprivate void writeSession(SessionInformations session, boolean displayUser) throws IOException {\n\t\tfinal String nextColumnAlignRight = \"</td><td align='right'>\";\n\t\tfinal String nextColumnAlignCenter = \"</td><td align='center'>\";\n\t\twrite(\"<td><a href='?part=sessions&amp;sessionId=\");\n\t\twrite(htmlEncodeButNotSpace(session.getId()));\n\t\twrite(\"'>\");\n\t\twrite(htmlEncodeButNotSpace(session.getId()));\n\t\twrite(\"</a>\");\n\t\twrite(nextColumnAlignRight);\n\t\twrite(durationFormat.format(session.getLastAccess()));\n\t\twrite(nextColumnAlignRight);\n\t\twrite(durationFormat.format(session.getAge()));\n\t\twrite(nextColumnAlignRight);\n\t\twrite(expiryFormat.format(session.getExpirationDate()));\n\n\t\twrite(nextColumnAlignRight);\n\t\twrite(integerFormat.format(session.getAttributeCount()));\n\t\twrite(nextColumnAlignCenter);\n\t\tif (session.isSerializable()) {\n\t\t\twrite(\"#oui#\");\n\t\t} else {\n\t\t\twrite(\"<span class='severe'>#non#</span>\");\n\t\t}\n\t\twrite(nextColumnAlignRight);\n\t\twrite(integerFormat.format(session.getSerializedSize()));\n\t\tfinal String nextColumn = \"</td><td>\";\n\t\twrite(nextColumn);\n\t\tfinal String remoteAddr = session.getRemoteAddr();\n\t\tif (remoteAddr == null) {\n\t\t\twrite(\"&nbsp;\");\n\t\t} else {\n\t\t\twrite(htmlEncodeButNotSpace(remoteAddr));\n\t\t}\n\t\twrite(nextColumnAlignCenter);\n\t\twriteCountry(session);\n\t\tif (displayUser) {\n\t\t\twrite(nextColumn);\n\t\t\tfinal String remoteUser = session.getRemoteUser();\n\t\t\tif (remoteUser == null) {\n\t\t\t\twrite(\"&nbsp;\");\n\t\t\t} else {\n\t\t\t\twriteDirectly(htmlEncodeButNotSpace(remoteUser));\n\t\t\t}\n\t\t}\n\t\twrite(\"</td><td align='center' class='noPrint'>\");\n\t\twrite(A_HREF_PART_SESSIONS);\n\t\twrite(\"&amp;action=invalidate_session&amp;sessionId=\");\n\t\twrite(urlEncode(session.getId()));\n\t\twrite(\"' onclick=\\\"javascript:return confirm('\"\n\t\t\t\t+ getStringForJavascript(\"confirm_invalidate_session\") + \"');\\\">\");\n\t\twrite(\"<img width='16' height='16' src='?resource=user-trash.png' alt='#invalidate_session#' title='#invalidate_session#' />\");\n\t\twrite(\"</a>\");\n\t\twrite(\"</td>\");\n\t}", "_vul4j_info": {"vul_id": "VUL4J-50", "cve_id": "CVE-2013-4378", "cwe_id": "CWE-79", "project": ["javamelody_javamelody"], "project_url": "https://github.com/javamelody/javamelody", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl javamelody-core", "test_cmd": "mvn test -pl javamelody-core -Dtest=net.bull.javamelody.TestHtmlSessionInformationsReport#testCVE_2013_4378", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "javamelody-core", "fixing_commit_hash": "aacbc46151ff4ac1ca34ce0899c2a6113071c66e", "human_patch_url": "https://github.com/javamelody/javamelody/commit/aacbc46151ff4ac1ca34ce0899c2a6113071c66e", "failing_tests": ["net.bull.javamelody.TestHtmlSessionInformationsReport#testCVE_2013_4378"], "warning": [""]}, "_vul4j_detailed_info": {"no": "50", "vul_id": "VUL4J-50", "cve_id": "CVE-2013-4378", "cwe_id": "CWE-79", "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp_id": "A7", "repo_slug": "javamelody/javamelody", "human_patch": "https://github.com/javamelody/javamelody/commit/aacbc46151ff4ac1ca34ce0899c2a6113071c66e", "build_system": "Maven", "compliance_level": "8", "failing_tests": "net.bull.javamelody.TestHtmlSessionInformationsReport#testCVE_2013_4378", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl javamelody-core", "test_cmd": "mvn test -pl javamelody-core -Dtest=net.bull.javamelody.TestHtmlSessionInformationsReport#testCVE_2013_4378", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "javamelody-core", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-53", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "hudson/scheduler/CronTab.java", "method": "CronTab.CalendarField.setTo[206-208]", "lineno": 207, "content": "            c.set(field,i-offset);", "_method_simple_signature": "setTo(Calendar,int)", "_file_in_project": "core/src/main/java/hudson/scheduler/CronTab.java"}], "dir.src.classes": "core/src/main/java", "dir.src.tests": "core/src/test/java", "tests.trigger": ["hudson.scheduler.CronTabTest::testLongMonths"], "bug_method": "        void setTo(Calendar c, int i) {\n            c.set(field,i-offset);\n        }", "fixed_method": "        void setTo(Calendar c, int i) {\n            c.set(field,Math.min(i-offset, c.getActualMaximum(field)));\n        }", "_vul4j_info": {"vul_id": "VUL4J-53", "cve_id": "CVE-2018-1999044", "cwe_id": "CWE-835", "project": ["jenkinsci_jenkins"], "project_url": "https://github.com/jenkinsci/jenkins", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=hudson.scheduler.CronTabTest#testLongMonths", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "fixing_commit_hash": "e5046911c57e60a1d6d8aca9b21bd9093b0f3763", "human_patch_url": "https://github.com/jenkinsci/jenkins/commit/e5046911c57e60a1d6d8aca9b21bd9093b0f3763", "failing_tests": ["hudson.scheduler.CronTabTest#testLongMonths"], "warning": [""]}, "_vul4j_detailed_info": {"no": "53", "vul_id": "VUL4J-53", "cve_id": "CVE-2018-1999044", "cwe_id": "CWE-835", "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "owasp_id": "none", "repo_slug": "jenkinsci/jenkins", "human_patch": "https://github.com/jenkinsci/jenkins/commit/e5046911c57e60a1d6d8aca9b21bd9093b0f3763", "build_system": "Maven", "compliance_level": "8", "failing_tests": "hudson.scheduler.CronTabTest#testLongMonths", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=hudson.scheduler.CronTabTest#testLongMonths", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-55", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "hudson/scheduler/CronTab.java", "method": "CronTab.ceil[333-365]", "lineno": 359, "content": "__insert__", "_method_simple_signature": "ceil(Calendar)", "_file_in_project": "core/src/main/java/hudson/scheduler/CronTab.java"}], "dir.src.classes": "core/src/main/java", "dir.src.tests": "core/src/test/java", "tests.trigger": ["hudson.scheduler.CronTabTest::testCeilLongMonths"], "bug_method": "    public Calendar ceil(Calendar cal) {\n        Calendar twoYearsFuture = (Calendar) cal.clone();\n        twoYearsFuture.add(Calendar.YEAR, 2);\n        OUTER:\n        while (true) {\n            if (cal.compareTo(twoYearsFuture) > 0) {\n                // we went too far into the future\n                throw new RareOrImpossibleDateException();\n            }\n            for (CalendarField f : CalendarField.ADJUST_ORDER) {\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   // this field is already in a good shape. move on to next\n\n                // we are modifying this field, so clear all the lower level fields\n                for (CalendarField l=f.lowerField; l!=null; l=l.lowerField)\n                    l.clear(cal);\n\n                if (next<0) {\n                    // we need to roll over to the next field.\n                    f.rollUp(cal, 1);\n                    f.setTo(cal,f.first(this));\n                    // since higher order field is affected by this, we need to restart from all over\n                    continue OUTER;\n                } else {\n                    f.setTo(cal,next);\n                    if (f.redoAdjustmentIfModified)\n                        continue OUTER; // when we modify DAY_OF_MONTH and DAY_OF_WEEK, do it all over from the top\n                }\n            }\n            return cal; // all fields adjusted\n        }\n    }", "fixed_method": "    public Calendar ceil(Calendar cal) {\n        Calendar twoYearsFuture = (Calendar) cal.clone();\n        twoYearsFuture.add(Calendar.YEAR, 2);\n        OUTER:\n        while (true) {\n            if (cal.compareTo(twoYearsFuture) > 0) {\n                // we went too far into the future\n                throw new RareOrImpossibleDateException();\n            }\n            for (CalendarField f : CalendarField.ADJUST_ORDER) {\n                int cur = f.valueOf(cal);\n                int next = f.ceil(this,cur);\n                if (cur==next)  continue;   // this field is already in a good shape. move on to next\n\n                // we are modifying this field, so clear all the lower level fields\n                for (CalendarField l=f.lowerField; l!=null; l=l.lowerField)\n                    l.clear(cal);\n\n                if (next<0) {\n                    // we need to roll over to the next field.\n                    f.rollUp(cal, 1);\n                    f.setTo(cal,f.first(this));\n                    // since higher order field is affected by this, we need to restart from all over\n                    continue OUTER;\n                } else {\n                    f.setTo(cal,next);\n                    //check if value was actually set\n                    if (f.valueOf(cal) != next) {\n                        // we need to roll over to the next field.\n                        f.rollUp(cal, 1);\n                        f.setTo(cal,f.first(this));\n                        // since higher order field is affected by this, we need to restart from all over\n                        continue OUTER;\n                    }\n                    if (f.redoAdjustmentIfModified)\n                        continue OUTER; // when we modify DAY_OF_MONTH and DAY_OF_WEEK, do it all over from the top\n                }\n            }\n            return cal; // all fields adjusted\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-55", "cve_id": "CVE-2018-1000864", "cwe_id": "CWE-835", "project": ["jenkinsci_jenkins"], "project_url": "https://github.com/jenkinsci/jenkins", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=hudson.scheduler.CronTabTest#testCeilLongMonths", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "fixing_commit_hash": "73afa0ca786a87f05b5433e2e38f863826fcad17", "human_patch_url": "https://github.com/jenkinsci/jenkins/commit/73afa0ca786a87f05b5433e2e38f863826fcad17", "failing_tests": ["hudson.scheduler.CronTabTest#testCeilLongMonths"], "warning": [""]}, "_vul4j_detailed_info": {"no": "55", "vul_id": "VUL4J-55", "cve_id": "CVE-2018-1000864", "cwe_id": "CWE-835", "cwe_name": "Loop with Unreachable Exit Condition ('Infinite Loop')", "owasp_id": "none", "repo_slug": "jenkinsci/jenkins", "human_patch": "https://github.com/jenkinsci/jenkins/commit/73afa0ca786a87f05b5433e2e38f863826fcad17", "build_system": "Maven", "compliance_level": "8", "failing_tests": "hudson.scheduler.CronTabTest#testCeilLongMonths", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl core", "test_cmd": "mvn test -pl core -Dtest=hudson.scheduler.CronTabTest#testCeilLongMonths", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "core", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-59", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/jsoup/parser/TokeniserState.java", "method": ".read[733-778]", "lineno": 760, "content": "__insert__", "_method_simple_signature": "read(Tokeniser,CharacterReader)", "_file_in_project": "src/main/java/org/jsoup/parser/TokeniserState.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.jsoup.parser.XmlTreeBuilderTest::testDoesHandleEOFInTag"], "bug_method": "        void read(Tokeniser t, CharacterReader r) {\n            char c = r.consume();\n            switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }\n        }", "fixed_method": "        void read(Tokeniser t, CharacterReader r) {\n            char c = r.consume();\n            switch (c) {\n                case '\\t':\n                case '\\n':\n                case '\\r':\n                case '\\f':\n                case ' ':\n                    // ignore\n                    break;\n                case '\"':\n                    t.transition(AttributeValue_doubleQuoted);\n                    break;\n                case '&':\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case '\\'':\n                    t.transition(AttributeValue_singleQuoted);\n                    break;\n                case nullChar:\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(replacementChar);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                case eof:\n                    t.eofError(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '>':\n                    t.error(this);\n                    t.emitTagPending();\n                    t.transition(Data);\n                    break;\n                case '<':\n                case '=':\n                case '`':\n                    t.error(this);\n                    t.tagPending.appendAttributeValue(c);\n                    t.transition(AttributeValue_unquoted);\n                    break;\n                default:\n                    r.unconsume();\n                    t.transition(AttributeValue_unquoted);\n            }\n        }", "_vul4j_info": {"vul_id": "VUL4J-59", "cve_id": "CVE-2015-6748", "cwe_id": "CWE-79", "project": ["jhy_jsoup"], "project_url": "https://github.com/jhy/jsoup", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.jsoup.parser.XmlTreeBuilderTest#testDoesHandleEOFInTag", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "4edb78991f8d0bf87dafde5e01ccd8922065c9b2", "human_patch_url": "https://github.com/jhy/jsoup/commit/4edb78991f8d0bf87dafde5e01ccd8922065c9b2", "failing_tests": ["org.jsoup.parser.XmlTreeBuilderTest#testDoesHandleEOFInTag"], "warning": [""]}, "_vul4j_detailed_info": {"no": "59", "vul_id": "VUL4J-59", "cve_id": "CVE-2015-6748", "cwe_id": "CWE-79", "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp_id": "A7", "repo_slug": "jhy/jsoup", "human_patch": "https://github.com/jhy/jsoup/commit/4edb78991f8d0bf87dafde5e01ccd8922065c9b2", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.jsoup.parser.XmlTreeBuilderTest#testDoesHandleEOFInTag", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.jsoup.parser.XmlTreeBuilderTest#testDoesHandleEOFInTag", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-61", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "apoc/load/Xml.java", "method": "Xml.xmlXpathToMapResult[60-105]", "lineno": 68, "content": "__insert__", "_method_simple_signature": "xmlXpathToMapResult(String,boolean,String,Map)", "_file_in_project": "src/main/java/apoc/load/Xml.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["apoc.load.XmlTest::testLoadXmlPreventXXEVulnerabilityThrowsQueryExecutionException"], "bug_method": "    private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n        if (config == null) config = Collections.emptyMap();\n        boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n        List<MapResult> result = new ArrayList<>();\n        try {\n            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n            documentBuilderFactory.setNamespaceAware(true);\n            documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\n            FileUtils.checkReadAllowed(url);\n\n            Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n\n            Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n            XPathFactory xPathFactory = XPathFactory.newInstance();\n\n            XPath xPath = xPathFactory.newXPath();\n\n            path = StringUtils.isEmpty(path) ? \"/\" : path;\n            XPathExpression xPathExpression = xPath.compile(path);\n            NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n\n            for (int i = 0; i < nodeList.getLength(); i++) {\n                final Deque<Map<String, Object>> stack = new LinkedList<>();\n\n                handleNode(stack, nodeList.item(i), simpleMode);\n                for (int index = 0; index < stack.size(); index++) {\n                    result.add(new MapResult(stack.pollFirst()));\n                }\n            }\n        }\n        catch (FileNotFoundException e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new FileNotFoundException(e.getMessage());\n        }\n        catch (Exception e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new Exception(e);\n        }\n        return result.stream();\n    }", "fixed_method": "    private Stream<MapResult> xmlXpathToMapResult(@Name(\"url\") String url, boolean simpleMode, String path, Map<String, Object> config) throws Exception {\n        if (config == null) config = Collections.emptyMap();\n        boolean failOnError = (boolean) config.getOrDefault(\"failOnError\", true);\n        List<MapResult> result = new ArrayList<>();\n        try {\n            DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n            documentBuilderFactory.setNamespaceAware(true);\n            documentBuilderFactory.setIgnoringElementContentWhitespace(true);\n            documentBuilderFactory.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n            DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n\n            FileUtils.checkReadAllowed(url);\n\n            Map<String, Object> headers = (Map) config.getOrDefault( \"headers\", Collections.emptyMap() );\n\n            Document doc = documentBuilder.parse(Util.openInputStream(url, headers, null));\n            XPathFactory xPathFactory = XPathFactory.newInstance();\n\n            XPath xPath = xPathFactory.newXPath();\n\n            path = StringUtils.isEmpty(path) ? \"/\" : path;\n            XPathExpression xPathExpression = xPath.compile(path);\n            NodeList nodeList = (NodeList) xPathExpression.evaluate(doc, XPathConstants.NODESET);\n\n            for (int i = 0; i < nodeList.getLength(); i++) {\n                final Deque<Map<String, Object>> stack = new LinkedList<>();\n\n                handleNode(stack, nodeList.item(i), simpleMode);\n                for (int index = 0; index < stack.size(); index++) {\n                    result.add(new MapResult(stack.pollFirst()));\n                }\n            }\n        }\n        catch (FileNotFoundException e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new FileNotFoundException(e.getMessage());\n        }\n        catch (Exception e){\n            if(!failOnError)\n                return Stream.of(new MapResult(Collections.emptyMap()));\n            else\n                throw new Exception(e);\n        }\n        return result.stream();\n    }", "_vul4j_info": {"vul_id": "VUL4J-61", "cve_id": "CVE-2018-1000820", "cwe_id": "CWE-611", "project": ["neo4j-contrib_neo4j-apoc-procedures"], "project_url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures", "build_system": "Gradle", "compliance_level": "8", "compile_cmd": "./gradlew compileTestJava", "test_all_cmd": "./gradlew test", "test_cmd": "./gradlew test --tests apoc.load.XmlTest.testLoadXmlPreventXXEVulnerabilityThrowsQueryExecutionException", "cmd_options": "", "failing_module": "root", "fixing_commit_hash": "45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a", "human_patch_url": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a", "failing_tests": ["apoc.load.XmlTest#testLoadXmlPreventXXEVulnerabilityThrowsQueryExecutionException"], "warning": [""]}, "_vul4j_detailed_info": {"no": "61", "vul_id": "VUL4J-61", "cve_id": "CVE-2018-1000820", "cwe_id": "CWE-611", "cwe_name": "Improper Restriction of XML External Entity Reference", "owasp_id": "A4", "repo_slug": "neo4j-contrib/neo4j-apoc-procedures", "human_patch": "https://github.com/neo4j-contrib/neo4j-apoc-procedures/commit/45bc09c8bd7f17283e2a7e85ce3f02cb4be4fd1a", "build_system": "Gradle", "compliance_level": "8", "failing_tests": "apoc.load.XmlTest#testLoadXmlPreventXXEVulnerabilityThrowsQueryExecutionException", "compile_cmd": "./gradlew compileTestJava", "test_all_cmd": "./gradlew test", "test_cmd": "./gradlew test --tests apoc.load.XmlTest.testLoadXmlPreventXXEVulnerabilityThrowsQueryExecutionException", "cmd_options": "", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "build/classes/java/main", "test_classes": "build/classes/java/main", "warning": ""}}, {"pid": "VUL4J-64", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "com/google/refine/importers/XmlImporter.java", "method": "XmlImporter.createXMLStreamReader[320-326]", "lineno": 324, "content": " ", "_method_simple_signature": "createXMLStreamReader(InputStream)", "_file_in_project": "main/src/com/google/refine/importers/XmlImporter.java"}], "dir.src.classes": "main/src", "dir.src.tests": "main/tests/server/src", "tests.trigger": ["com.google.refine.tests.importers.XmlImporterTests::ignoresDtds"], "bug_method": "    final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException, IOException {\n        XMLInputFactory factory = XMLInputFactory.newInstance();\n        factory.setProperty(XMLInputFactory.IS_COALESCING, true);\n        factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n \n        return factory.createXMLStreamReader(wrapPrefixRemovingInputStream(inputStream));\n    }", "fixed_method": "    final static private XMLStreamReader createXMLStreamReader(InputStream inputStream) throws XMLStreamException, IOException {\n        XMLInputFactory factory = XMLInputFactory.newInstance();\n        factory.setProperty(XMLInputFactory.IS_COALESCING, true);\n        factory.setProperty(XMLInputFactory.IS_REPLACING_ENTITY_REFERENCES, true);\n        factory.setProperty(XMLInputFactory.SUPPORT_DTD, false);\n        \n        return factory.createXMLStreamReader(wrapPrefixRemovingInputStream(inputStream));\n    }", "_vul4j_info": {"vul_id": "VUL4J-64", "cve_id": "CVE-2018-20157", "cwe_id": "CWE-611", "project": ["OpenRefine_OpenRefine"], "project_url": "https://github.com/OpenRefine/OpenRefine", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "./refine build", "test_all_cmd": "mvn test -pl main", "test_cmd": "mvn test -pl main -Dtest=com.google.refine.tests.importers.XmlImporterTests#ignoresDtds", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "main", "fixing_commit_hash": "6a0d7d56e4ffb420316ce7849fde881344fbf881", "human_patch_url": "https://github.com/OpenRefine/OpenRefine/commit/6a0d7d56e4ffb420316ce7849fde881344fbf881", "failing_tests": ["com.google.refine.tests.importers.XmlImporterTests#ignoresDtds"], "warning": [""]}, "_vul4j_detailed_info": {"no": "64", "vul_id": "VUL4J-64", "cve_id": "CVE-2018-20157", "cwe_id": "CWE-611", "cwe_name": "Improper Restriction of XML External Entity Reference", "owasp_id": "A4", "repo_slug": "OpenRefine/OpenRefine", "human_patch": "https://github.com/OpenRefine/OpenRefine/commit/6a0d7d56e4ffb420316ce7849fde881344fbf881", "build_system": "Maven", "compliance_level": "8", "failing_tests": "com.google.refine.tests.importers.XmlImporterTests#ignoresDtds", "compile_cmd": "./refine build", "test_all_cmd": "mvn test -pl main", "test_cmd": "mvn test -pl main -Dtest=com.google.refine.tests.importers.XmlImporterTests#ignoresDtds", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "main", "src": "src", "test": "tests/server/src", "src_classes": "webapp/WEB-INF/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-65", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "com/google/refine/importing/ImportingUtilities.java", "method": "ImportingUtilities.allocateFile[437-456]", "lineno": 443, "content": "        File file = new File(dir, name);", "_method_simple_signature": "allocateFile(File,String)", "_file_in_project": "main/src/com/google/refine/importing/ImportingUtilities.java"}], "dir.src.classes": "main/src", "dir.src.tests": "main/tests/server/src", "tests.trigger": ["com.google.refine.tests.importing.ImportingUtilitiesTests::testZipSlip"], "bug_method": "    static public File allocateFile(File dir, String name) {\n        int q = name.indexOf('?');\n        if (q > 0) {\n            name = name.substring(0, q);\n        }\n        \n        File file = new File(dir, name);\n        \n        int dot = name.indexOf('.');\n        String prefix = dot < 0 ? name : name.substring(0, dot);\n        String suffix = dot < 0 ? \"\" : name.substring(dot);\n        int index = 2;\n        while (file.exists()) {\n            file = new File(dir, prefix + \"-\" + index++ + suffix);\n        }\n        \n        file.getParentFile().mkdirs();\n        \n        return file;\n    }", "fixed_method": "    static public File allocateFile(File dir, String name) {\n        int q = name.indexOf('?');\n        if (q > 0) {\n            name = name.substring(0, q);\n        }\n        \n        File file = new File(dir, name);     \n        // For CVE-2018-19859, issue #1840\n        if (!file.toPath().normalize().startsWith(dir.toPath().normalize())) {\n        \tthrow new IllegalArgumentException(\"Zip archives with files escaping their root directory are not allowed.\");\n        }\n        \n        int dot = name.indexOf('.');\n        String prefix = dot < 0 ? name : name.substring(0, dot);\n        String suffix = dot < 0 ? \"\" : name.substring(dot);\n        int index = 2;\n        while (file.exists()) {\n            file = new File(dir, prefix + \"-\" + index++ + suffix);\n        }\n        \n        file.getParentFile().mkdirs();\n        \n        return file;\n    }", "_vul4j_info": {"vul_id": "VUL4J-65", "cve_id": "CVE-2018-19859", "cwe_id": "CWE-22", "project": ["OpenRefine_OpenRefine"], "project_url": "https://github.com/OpenRefine/OpenRefine", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "./refine build", "test_all_cmd": "mvn test -pl main", "test_cmd": "mvn test -pl main -Dtest=com.google.refine.tests.importing.ImportingUtilitiesTests#testZipSlip", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "main", "fixing_commit_hash": "e243e73e4064de87a913946bd320fbbe246da656", "human_patch_url": "https://github.com/OpenRefine/OpenRefine/commit/e243e73e4064de87a913946bd320fbbe246da656", "failing_tests": ["com.google.refine.tests.importing.ImportingUtilitiesTests#testZipSlip"], "warning": [""]}, "_vul4j_detailed_info": {"no": "65", "vul_id": "VUL4J-65", "cve_id": "CVE-2018-19859", "cwe_id": "CWE-22", "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "owasp_id": "A5", "repo_slug": "OpenRefine/OpenRefine", "human_patch": "https://github.com/OpenRefine/OpenRefine/commit/e243e73e4064de87a913946bd320fbbe246da656", "build_system": "Maven", "compliance_level": "8", "failing_tests": "com.google.refine.tests.importing.ImportingUtilitiesTests#testZipSlip", "compile_cmd": "./refine build", "test_all_cmd": "mvn test -pl main", "test_cmd": "mvn test -pl main -Dtest=com.google.refine.tests.importing.ImportingUtilitiesTests#testZipSlip", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "main", "src": "src", "test": "tests/server/src", "src_classes": "webapp/WEB-INF/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-66", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java", "method": "MediaTypeHeaderDelegate.isValid[32-58]", "lineno": 52, "content": "__insert__", "_method_simple_signature": "isValid(String)", "_file_in_project": "resteasy-core/src/main/java/org/jboss/resteasy/plugins/delegates/MediaTypeHeaderDelegate.java"}], "dir.src.classes": "resteasy-core/src/main/java", "dir.src.tests": "resteasy-core/src/test/java", "tests.trigger": ["org.jboss.resteasy.test.mediatype.MediaTypeHeaderTest::testNewLineInHeaderValueIsRejected"], "bug_method": "   protected static boolean isValid(String str)\n   {\n      if (str == null || str.length() == 0) return false;\n      for (int i = 0; i < str.length(); i++) {\n         switch (str.charAt(i))\n         {\n            case '/':\n            case '\\\\':\n            case '?':\n            case ':':\n            case '<':\n            case '>':\n            case ';':\n            case '(':\n            case ')':\n            case '@':\n            case ',':\n            case '[':\n            case ']':\n            case '=':\n               return false;\n            default:\n               break;\n         }\n      }\n      return true;\n   }", "fixed_method": "   protected static boolean isValid(String str)\n   {\n      if (str == null || str.length() == 0) return false;\n      for (int i = 0; i < str.length(); i++) {\n         switch (str.charAt(i))\n         {\n            case '/':\n            case '\\\\':\n            case '?':\n            case ':':\n            case '<':\n            case '>':\n            case ';':\n            case '(':\n            case ')':\n            case '@':\n            case ',':\n            case '[':\n            case ']':\n            case '=':\n            case '\\n':\n               return false;\n            default:\n               break;\n         }\n      }\n      return true;\n   }", "_vul4j_info": {"vul_id": "VUL4J-66", "cve_id": "CVE-2020-1695", "cwe_id": "CWE-20", "project": ["resteasy_Resteasy"], "project_url": "https://github.com/resteasy/Resteasy", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "cd testsuite;mvn test", "test_cmd": "cd testsuite;mvn test -Dtest=org.jboss.resteasy.test.mediatype.MediaTypeHeaderTest#testNewLineInHeaderValueIsRejected", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "testsuite/unit-tests", "fixing_commit_hash": "acf15f2a8067f7e4cf5838342cecfa0b78a174fb", "human_patch_url": "https://github.com/resteasy/Resteasy/commit/acf15f2a8067f7e4cf5838342cecfa0b78a174fb", "failing_tests": ["org.jboss.resteasy.test.mediatype.MediaTypeHeaderTest#testNewLineInHeaderValueIsRejected"], "warning": [""]}, "_vul4j_detailed_info": {"no": "66", "vul_id": "VUL4J-66", "cve_id": "CVE-2020-1695", "cwe_id": "CWE-20", "cwe_name": "Improper Input Validation", "owasp_id": "CWE Top 25", "repo_slug": "resteasy/Resteasy", "human_patch": "https://github.com/resteasy/Resteasy/commit/acf15f2a8067f7e4cf5838342cecfa0b78a174fb", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.jboss.resteasy.test.mediatype.MediaTypeHeaderTest#testNewLineInHeaderValueIsRejected", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "cd testsuite;mvn test", "test_cmd": "cd testsuite;mvn test -Dtest=org.jboss.resteasy.test.mediatype.MediaTypeHeaderTest#testNewLineInHeaderValueIsRejected", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "testsuite/unit-tests", "src": "../../resteasy-core/src/main/java", "test": "src/test/java", "src_classes": "../../resteasy-core/target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-73", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/springframework/security/authentication/encoding/PlaintextPasswordEncoder.java", "method": "PlaintextPasswordEncoder.isPasswordValid[53-68]", "lineno": 54, "content": "__insert__", "_method_simple_signature": "isPasswordValid(String,String,Object)", "_file_in_project": "core/src/main/java/org/springframework/security/authentication/encoding/PlaintextPasswordEncoder.java"}], "dir.src.classes": "core/src/main/java", "dir.src.tests": "core/src/test/java", "tests.trigger": ["org.springframework.security.authentication.encoding.PlaintextPasswordEncoderTests::testNull"], "bug_method": "\tpublic boolean isPasswordValid(String encPass, String rawPass, Object salt) {\n\t\tString pass1 = encPass + \"\";\n\n\t\t// Strict delimiters is false because pass2 never persisted anywhere\n\t\t// and we want to avoid unnecessary exceptions as a result (the\n\t\t// authentication will fail as the encodePassword never allows them)\n\t\tString pass2 = mergePasswordAndSalt(rawPass, salt, false);\n\n\t\tif (ignorePasswordCase) {\n\t\t\t// Note: per String javadoc to get correct results for Locale insensitive, use\n\t\t\t// English\n\t\t\tpass1 = pass1.toLowerCase(Locale.ENGLISH);\n\t\t\tpass2 = pass2.toLowerCase(Locale.ENGLISH);\n\t\t}\n\t\treturn PasswordEncoderUtils.equals(pass1, pass2);\n\t}", "fixed_method": "\tpublic boolean isPasswordValid(String encPass, String rawPass, Object salt) {\n\t\tif (encPass == null) {\n\t\t\treturn false;\n\t\t}\n\t\tString pass1 = encPass + \"\";\n\n\t\t// Strict delimiters is false because pass2 never persisted anywhere\n\t\t// and we want to avoid unnecessary exceptions as a result (the\n\t\t// authentication will fail as the encodePassword never allows them)\n\t\tString pass2 = mergePasswordAndSalt(rawPass, salt, false);\n\n\t\tif (ignorePasswordCase) {\n\t\t\t// Note: per String javadoc to get correct results for Locale insensitive, use\n\t\t\t// English\n\t\t\tpass1 = pass1.toLowerCase(Locale.ENGLISH);\n\t\t\tpass2 = pass2.toLowerCase(Locale.ENGLISH);\n\t\t}\n\t\treturn PasswordEncoderUtils.equals(pass1, pass2);\n\t}", "_vul4j_info": {"vul_id": "VUL4J-73", "cve_id": "CVE-2019-11272", "cwe_id": "CWE-522", "project": ["spring-projects_spring-security"], "project_url": "https://github.com/spring-projects/spring-security", "build_system": "Gradle", "compliance_level": "8", "compile_cmd": "./gradlew :spring-security-core:compileTestJava", "test_all_cmd": "./gradlew :spring-security-core:test", "test_cmd": "./gradlew :spring-security-core:test --tests org.springframework.security.authentication.encoding.PlaintextPasswordEncoderTests.testNull", "cmd_options": "", "failing_module": "core", "fixing_commit_hash": "b2d4fec3617c497c5a8eb9c7e5270e0c7db293ee", "human_patch_url": "https://github.com/spring-projects/spring-security/commit/b2d4fec3617c497c5a8eb9c7e5270e0c7db293ee", "failing_tests": ["org.springframework.security.authentication.encoding.PlaintextPasswordEncoderTests#testNull"], "warning": [""]}, "_vul4j_detailed_info": {"no": "73", "vul_id": "VUL4J-73", "cve_id": "CVE-2019-11272", "cwe_id": "CWE-522", "cwe_name": "Insufficiently Protected Credentials", "owasp_id": "A2", "repo_slug": "spring-projects/spring-security", "human_patch": "https://github.com/spring-projects/spring-security/commit/b2d4fec3617c497c5a8eb9c7e5270e0c7db293ee", "build_system": "Gradle", "compliance_level": "8", "failing_tests": "org.springframework.security.authentication.encoding.PlaintextPasswordEncoderTests#testNull", "compile_cmd": "./gradlew :spring-security-core:compileTestJava", "test_all_cmd": "./gradlew :spring-security-core:test", "test_cmd": "./gradlew :spring-security-core:test --tests org.springframework.security.authentication.encoding.PlaintextPasswordEncoderTests.testNull", "cmd_options": "", "failing_module": "core", "src": "src/main/java", "test": "src/test/java", "src_classes": "build/classes/main", "test_classes": "build/classes/test", "warning": ""}}, {"pid": "VUL4J-23", "bid": 0, "num_buggy_lines": 1, "is_single_line_bug": true, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/apache/sling/xss/impl/XSSAPIImpl.java", "method": "XSSAPIImpl.encodeForJSString[431-433]", "lineno": 432, "content": "        return source == null ? null : Encode.forJavaScriptSource(source);", "_method_simple_signature": "encodeForJSString(String)", "_file_in_project": "bundles/extensions/xss/src/main/java/org/apache/sling/xss/impl/XSSAPIImpl.java"}], "dir.src.classes": "bundles/extensions/xss/src/main/java", "dir.src.tests": "bundles/extensions/xss/src/test/java", "tests.trigger": ["org.apache.sling.xss.impl.XSSAPIImplTest::testEncodeForJSString", "org.apache.sling.xss.impl.XSSAPIImplTest::testGetValidJSToken"], "bug_method": "    public String encodeForJSString(String source) {\n        return source == null ? null : Encode.forJavaScriptSource(source);\n    }", "fixed_method": "    public String encodeForJSString(String source) {\n        return source == null ? null : Encode.forJavaScript(source).replace(\"\\\\-\", \"\\\\u002D\");\n    }", "_vul4j_info": {"vul_id": "VUL4J-23", "cve_id": "CVE-2016-5394", "cwe_id": "CWE-79", "project": ["apache_sling"], "project_url": "https://github.com/apache/sling", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl bundles/extensions/xss", "test_cmd": "mvn test -pl bundles/extensions/xss -Dtest=org.apache.sling.xss.impl.XSSAPIImplTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "bundles/extensions/xss", "fixing_commit_hash": "7d2365a248943071a44d8495655186e4f14ea294", "human_patch_url": "https://github.com/apache/sling/commit/7d2365a248943071a44d8495655186e4f14ea294", "failing_tests": ["org.apache.sling.xss.impl.XSSAPIImplTest#testEncodeForJSString", "org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidJSToken"], "warning": [""]}, "_vul4j_detailed_info": {"no": "23", "vul_id": "VUL4J-23", "cve_id": "CVE-2016-5394", "cwe_id": "CWE-79", "cwe_name": "Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')", "owasp_id": "A7", "repo_slug": "apache/sling", "human_patch": "https://github.com/apache/sling/commit/7d2365a248943071a44d8495655186e4f14ea294", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.apache.sling.xss.impl.XSSAPIImplTest#testEncodeForJSString,org.apache.sling.xss.impl.XSSAPIImplTest#testGetValidJSToken", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test -pl bundles/extensions/xss", "test_cmd": "mvn test -pl bundles/extensions/xss -Dtest=org.apache.sling.xss.impl.XSSAPIImplTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "bundles/extensions/xss", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-44", "bid": 0, "num_buggy_lines": 2, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/owasp/esapi/codecs/PercentCodec.java", "method": "PercentCodec.encodeCharacter[96-110]", "lineno": 102, "content": "__insert__", "_method_simple_signature": "encodeCharacter(char[],Character)", "_file_in_project": "src/main/java/org/owasp/esapi/codecs/PercentCodec.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.owasp.esapi.codecs.CodecImmunityTest::testImmuneEncode"], "bug_method": "\tpublic String encodeCharacter( char[] immune, Character c )\n\t{\n\t\tString cStr = String.valueOf(c.charValue());\n\t\tbyte[] bytes;\n\t\tStringBuilder sb;\n\n\t\tif(UNENCODED_SET.contains(c))\n\t\t\treturn cStr;\n\n\t\tbytes = toUtf8Bytes(cStr);\n\t\tsb = new StringBuilder(bytes.length * 3);\n\t\tfor(byte b : bytes)\n\t\t\tappendTwoUpperHex(sb.append('%'), b);\n\t\treturn sb.toString();\n\t}", "fixed_method": "\tpublic String encodeCharacter( char[] immune, Character c )\n\t{\n\t\tString cStr = String.valueOf(c.charValue());\n\t\tbyte[] bytes;\n\t\tStringBuilder sb;\n\n        // check for user specified immune characters\n        if ( immune != null && containsCharacter( c.charValue(), immune ) )\n            return cStr;\n\n        // check for standard characters (e.g., alphanumeric, etc.)\n\t\tif(UNENCODED_SET.contains(c))\n\t\t\treturn cStr;\n\n\t\tbytes = toUtf8Bytes(cStr);\n\t\tsb = new StringBuilder(bytes.length * 3);\n\t\tfor(byte b : bytes)\n\t\t\tappendTwoUpperHex(sb.append('%'), b);\n\t\treturn sb.toString();\n\t}", "_vul4j_info": {"vul_id": "VUL4J-44", "cve_id": "CVE-2013-5960", "cwe_id": "CWE-310", "project": ["ESAPI_esapi-java-legacy"], "project_url": "https://github.com/ESAPI/esapi-java-legacy", "build_system": "Maven", "compliance_level": "7", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.owasp.esapi.codecs.CodecImmunityTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "b7cbc53f9cc967cf1a5a9463d8c6fef9ed6ef4f7", "human_patch_url": "https://github.com/ESAPI/esapi-java-legacy/commit/b7cbc53f9cc967cf1a5a9463d8c6fef9ed6ef4f7", "failing_tests": ["org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec %De]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec IMMUNE_PERCENT (%)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (!)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS ($)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (*)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (+)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (-)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (.)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (=)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (?)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (@)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (^)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (_)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (|)]", "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (~)]"], "warning": [""]}, "_vul4j_detailed_info": {"no": "44", "vul_id": "VUL4J-44", "cve_id": "CVE-2013-5960", "cwe_id": "CWE-310", "cwe_name": "Cryptographic Issues", "owasp_id": "none", "repo_slug": "ESAPI/esapi-java-legacy", "human_patch": "https://github.com/ESAPI/esapi-java-legacy/commit/b7cbc53f9cc967cf1a5a9463d8c6fef9ed6ef4f7", "build_system": "Maven", "compliance_level": "7", "failing_tests": "org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec %De],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec IMMUNE_PERCENT (%)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (!)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS ($)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (*)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (+)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (-)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (.)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (=)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (?)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (@)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (^)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (_)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (|)],org.OWASP.esapi.codecs.CodecImmunityTest#testImmuneEncode[PercentCodec Full_ALPHA_AND_SPECIALS (~)]", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.owasp.esapi.codecs.CodecImmunityTest", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-57", "bid": 0, "num_buggy_lines": 4, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/jenkinsci/plugins/workflow/support/steps/build/BuildTriggerStepExecution.java", "method": "BuildTriggerStepExecution.start[60-148]", "lineno": 66, "content": "__insert__", "_method_simple_signature": "start()", "_file_in_project": "src/main/java/org/jenkinsci/plugins/workflow/support/steps/build/BuildTriggerStepExecution.java"}], "dir.src.classes": "src/main/java", "dir.src.tests": "src/test/java", "tests.trigger": ["org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerStepTest::permissions"], "bug_method": "    public boolean start() throws Exception {\n        String job = step.getJob();\n        Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n        if (item == null) {\n            throw new AbortException(\"No item named \" + job + \" found\");\n        }\n        if (step.getWait() && !(item instanceof Job)) {\n            // TODO find some way of allowing ComputedFolders to hook into the listener code\n            throw new AbortException(\"Waiting for non-job items is not supported\");\n        }\n        if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n            final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n            listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n\n            node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n            List<Action> actions = new ArrayList<>();\n            if (step.getWait()) {\n                StepContext context = getContext();\n                actions.add(new BuildTriggerAction(context, step.isPropagate()));\n                LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n            }\n            actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n            List<ParameterValue> parameters = step.getParameters();\n            if (parameters != null) {\n                parameters = completeDefaultParameters(parameters, (Job) project);\n                actions.add(new ParametersAction(parameters));\n            }\n            Integer quietPeriod = step.getQuietPeriod();\n            // TODO use new convenience method in 1.621\n            if (quietPeriod == null) {\n                quietPeriod = project.getQuietPeriod();\n            }\n            QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                @Override\n                protected Job asJob() {\n                    return (Job) project;\n                }\n            }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n            if (f == null) {\n                throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n            }\n        } else if (item instanceof Queue.Task){\n            if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n                throw new AbortException(\"Item type does not support parameters\");\n            }\n            Queue.Task task = (Queue.Task) item;\n            listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n            node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n            List<Action> actions = new ArrayList<>();\n            if (step.getWait()) {\n                StepContext context = getContext();\n                actions.add(new BuildTriggerAction(context, step.isPropagate()));\n                LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n            }\n            actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n            Integer quietPeriod = step.getQuietPeriod();\n            if (quietPeriod == null) {\n                try {\n                    Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                    if (getQuietPeriod.getReturnType().equals(int.class)) {\n                        quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                    }\n                } catch (NoSuchMethodException e) {\n                    // ignore, best effort only\n                } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                    LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                }\n            }\n            if (quietPeriod == null) {\n                quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n            }\n            ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n            if (scheduleResult.isRefused()) {\n                throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n            }\n        } else {\n            throw new AbortException(\"The item named \" + job + \" is a \"\n                    + (item instanceof Describable\n                    ? ((Describable) item).getDescriptor().getDisplayName()\n                    : item.getClass().getName())\n                    + \" which is not something that can be built\");\n        }\n        if (step.getWait()) {\n            return false;\n        } else {\n            getContext().onSuccess(null);\n            return true;\n        }\n    }", "fixed_method": "    public boolean start() throws Exception {\n        String job = step.getJob();\n        Item item = Jenkins.getActiveInstance().getItem(job, invokingRun.getParent(), Item.class);\n        if (item == null) {\n            throw new AbortException(\"No item named \" + job + \" found\");\n        }\n        item.checkPermission(Item.BUILD);\n        if (step.getWait() && !(item instanceof Job)) {\n            // TODO find some way of allowing ComputedFolders to hook into the listener code\n            throw new AbortException(\"Waiting for non-job items is not supported\");\n        }\n        if (item instanceof ParameterizedJobMixIn.ParameterizedJob) {\n            final ParameterizedJobMixIn.ParameterizedJob project = (ParameterizedJobMixIn.ParameterizedJob) item;\n            listener.getLogger().println(\"Scheduling project: \" + ModelHyperlinkNote.encodeTo(project));\n\n            node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(project.getFullDisplayName())));\n            List<Action> actions = new ArrayList<>();\n            if (step.getWait()) {\n                StepContext context = getContext();\n                actions.add(new BuildTriggerAction(context, step.isPropagate()));\n                LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{project, context});\n            }\n            actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n            List<ParameterValue> parameters = step.getParameters();\n            if (parameters != null) {\n                parameters = completeDefaultParameters(parameters, (Job) project);\n                actions.add(new ParametersAction(parameters));\n            }\n            Integer quietPeriod = step.getQuietPeriod();\n            // TODO use new convenience method in 1.621\n            if (quietPeriod == null) {\n                quietPeriod = project.getQuietPeriod();\n            }\n            QueueTaskFuture<?> f = new ParameterizedJobMixIn() {\n                @Override\n                protected Job asJob() {\n                    return (Job) project;\n                }\n            }.scheduleBuild2(quietPeriod, actions.toArray(new Action[actions.size()]));\n            if (f == null) {\n                throw new AbortException(\"Failed to trigger build of \" + project.getFullName());\n            }\n        } else if (item instanceof Queue.Task){\n            if (step.getParameters() != null && !step.getParameters().isEmpty()) {\n                throw new AbortException(\"Item type does not support parameters\");\n            }\n            Queue.Task task = (Queue.Task) item;\n            listener.getLogger().println(\"Scheduling item: \" + ModelHyperlinkNote.encodeTo(item));\n            node.addAction(new LabelAction(Messages.BuildTriggerStepExecution_building_(task.getFullDisplayName())));\n            List<Action> actions = new ArrayList<>();\n            if (step.getWait()) {\n                StepContext context = getContext();\n                actions.add(new BuildTriggerAction(context, step.isPropagate()));\n                LOGGER.log(Level.FINER, \"scheduling a build of {0} from {1}\", new Object[]{task, context});\n            }\n            actions.add(new CauseAction(new Cause.UpstreamCause(invokingRun)));\n            Integer quietPeriod = step.getQuietPeriod();\n            if (quietPeriod == null) {\n                try {\n                    Method getQuietPeriod = task.getClass().getMethod(\"getQuietPeriod\");\n                    if (getQuietPeriod.getReturnType().equals(int.class)) {\n                        quietPeriod = (Integer) getQuietPeriod.invoke(task);\n                    }\n                } catch (NoSuchMethodException e) {\n                    // ignore, best effort only\n                } catch (IllegalAccessError | IllegalArgumentException | InvocationTargetException e) {\n                    LOGGER.log(Level.WARNING, \"Could not determine quiet period of \" + item.getFullName(), e);\n                }\n            }\n            if (quietPeriod == null) {\n                quietPeriod = Jenkins.getActiveInstance().getQuietPeriod();\n            }\n            ScheduleResult scheduleResult = Jenkins.getActiveInstance().getQueue().schedule2(task, quietPeriod,actions);\n            if (scheduleResult.isRefused()) {\n                throw new AbortException(\"Failed to trigger build of \" + item.getFullName());\n            }\n        } else {\n            throw new AbortException(\"The item named \" + job + \" is a \"\n                    + (item instanceof Describable\n                    ? ((Describable) item).getDescriptor().getDisplayName()\n                    : item.getClass().getName())\n                    + \" which is not something that can be built\");\n        }\n        if (step.getWait()) {\n            return false;\n        } else {\n            getContext().onSuccess(null);\n            return true;\n        }\n    }", "_vul4j_info": {"vul_id": "VUL4J-57", "cve_id": "CVE-2018-1000089", "cwe_id": "CWE-532", "project": ["jenkinsci_pipeline-build-step-plugin"], "project_url": "https://github.com/jenkinsci/pipeline-build-step-plugin", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerStepTest#permissions", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "fixing_commit_hash": "3dfefdec1f7b2a4ee0ef8902afdea720b1572cb3", "human_patch_url": "https://github.com/jenkinsci/pipeline-build-step-plugin/commit/3dfefdec1f7b2a4ee0ef8902afdea720b1572cb3", "failing_tests": ["org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerStepTest#permissions"], "warning": [""]}, "_vul4j_detailed_info": {"no": "57", "vul_id": "VUL4J-57", "cve_id": "CVE-2018-1000089", "cwe_id": "CWE-532", "cwe_name": "Insertion of Sensitive Information into Log File", "owasp_id": "CWE Top 40", "repo_slug": "jenkinsci/pipeline-build-step-plugin", "human_patch": "https://github.com/jenkinsci/pipeline-build-step-plugin/commit/3dfefdec1f7b2a4ee0ef8902afdea720b1572cb3", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerStepTest#permissions", "compile_cmd": "mvn -DskipTests clean install", "test_all_cmd": "mvn test", "test_cmd": "mvn test -Dtest=org.jenkinsci.plugins.workflow.support.steps.build.BuildTriggerStepTest#permissions", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "root", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}, {"pid": "VUL4J-74", "bid": 0, "num_buggy_lines": 7, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/springframework/security/core/token/SecureRandomFactoryBean.java", "method": "SecureRandomFactoryBean.getObject[37-52]", "lineno": 40, "content": "__insert__", "_method_simple_signature": "getObject()", "_file_in_project": "core/src/main/java/org/springframework/security/core/token/SecureRandomFactoryBean.java"}, {"file": "org/springframework/security/core/token/SecureRandomFactoryBean.java", "method": "SecureRandomFactoryBean.getObject[37-52]", "lineno": 44, "content": "\t\t}", "_method_simple_signature": "getObject()", "_file_in_project": "core/src/main/java/org/springframework/security/core/token/SecureRandomFactoryBean.java"}, {"file": "org/springframework/security/core/token/SecureRandomFactoryBean.java", "method": "SecureRandomFactoryBean.getObject[37-52]", "lineno": 45, "content": "\t\telse {", "_method_simple_signature": "getObject()", "_file_in_project": "core/src/main/java/org/springframework/security/core/token/SecureRandomFactoryBean.java"}, {"file": "org/springframework/security/core/token/SecureRandomFactoryBean.java", "method": "SecureRandomFactoryBean.getObject[37-52]", "lineno": 46, "content": "\t\t\t// Request the next bytes, thus eagerly incurring the expense of default", "_method_simple_signature": "getObject()", "_file_in_project": "core/src/main/java/org/springframework/security/core/token/SecureRandomFactoryBean.java"}, {"file": "org/springframework/security/core/token/SecureRandomFactoryBean.java", "method": "SecureRandomFactoryBean.getObject[37-52]", "lineno": 47, "content": "\t\t\t// seeding", "_method_simple_signature": "getObject()", "_file_in_project": "core/src/main/java/org/springframework/security/core/token/SecureRandomFactoryBean.java"}, {"file": "org/springframework/security/core/token/SecureRandomFactoryBean.java", "method": "SecureRandomFactoryBean.getObject[37-52]", "lineno": 48, "content": "\t\t\trnd.nextBytes(new byte[1]);", "_method_simple_signature": "getObject()", "_file_in_project": "core/src/main/java/org/springframework/security/core/token/SecureRandomFactoryBean.java"}], "dir.src.classes": "core/src/main/java", "dir.src.tests": "core/src/test/java", "tests.trigger": ["org.springframework.security.core.token.SecureRandomFactoryBeanTests::testCreatesUsingSeed"], "bug_method": "\tpublic SecureRandom getObject() throws Exception {\n\t\tSecureRandom rnd = SecureRandom.getInstance(algorithm);\n\n\t\tif (seed != null) {\n\t\t\t// Seed specified, so use it\n\t\t\tbyte[] seedBytes = FileCopyUtils.copyToByteArray(seed.getInputStream());\n\t\t\trnd.setSeed(seedBytes);\n\t\t}\n\t\telse {\n\t\t\t// Request the next bytes, thus eagerly incurring the expense of default\n\t\t\t// seeding\n\t\t\trnd.nextBytes(new byte[1]);\n\t\t}\n\n\t\treturn rnd;\n\t}", "fixed_method": "\tpublic SecureRandom getObject() throws Exception {\n\t\tSecureRandom rnd = SecureRandom.getInstance(algorithm);\n\n\t\t// Request the next bytes, thus eagerly incurring the expense of default\n\t\t// seeding and to prevent the see from replacing the entire state\n\t\trnd.nextBytes(new byte[1]);\n\n\t\tif (seed != null) {\n\t\t\t// Seed specified, so use it\n\t\t\tbyte[] seedBytes = FileCopyUtils.copyToByteArray(seed.getInputStream());\n\t\t\trnd.setSeed(seedBytes);\n\t\t}\n\n\t\treturn rnd;\n\t}", "_vul4j_info": {"vul_id": "VUL4J-74", "cve_id": "CVE-2019-3795", "cwe_id": "CWE-332", "project": ["spring-projects_spring-security"], "project_url": "https://github.com/spring-projects/spring-security", "build_system": "Gradle", "compliance_level": "8", "compile_cmd": "./gradlew :spring-security-core:compileTestJava", "test_all_cmd": "./gradlew :spring-security-core:test", "test_cmd": "./gradlew :spring-security-core:test --tests org.springframework.security.core.token.SecureRandomFactoryBeanTests.testCreatesUsingSeed", "cmd_options": "", "failing_module": "core", "fixing_commit_hash": "1304c958bf9c38940082f3ad1558d413ed82f2b", "human_patch_url": "https://github.com/spring-projects/spring-security/commit/1304c958bf9c38940082f3ad1558d413ed82f2b", "failing_tests": ["org.springframework.security.core.token.SecureRandomFactoryBeanTests#testCreatesUsingSeed"], "warning": [""]}, "_vul4j_detailed_info": {"no": "74", "vul_id": "VUL4J-74", "cve_id": "CVE-2019-3795", "cwe_id": "CWE-332", "cwe_name": "Insufficient Entropy in PRNG", "owasp_id": "none", "repo_slug": "spring-projects/spring-security", "human_patch": "https://github.com/spring-projects/spring-security/commit/1304c958bf9c38940082f3ad1558d413ed82f2b", "build_system": "Gradle", "compliance_level": "8", "failing_tests": "org.springframework.security.core.token.SecureRandomFactoryBeanTests#testCreatesUsingSeed", "compile_cmd": "./gradlew :spring-security-core:compileTestJava", "test_all_cmd": "./gradlew :spring-security-core:test", "test_cmd": "./gradlew :spring-security-core:test --tests org.springframework.security.core.token.SecureRandomFactoryBeanTests.testCreatesUsingSeed", "cmd_options": "", "failing_module": "core", "src": "src/main/java", "test": "src/test/java", "src_classes": "build/classes/java/main", "test_classes": "build/classes/java/test", "warning": ""}}, {"pid": "VUL4J-43", "bid": 0, "num_buggy_lines": 16, "is_single_line_bug": false, "is_single_method_bug": true, "is_single_file_bug": true, "buggy_lines": [{"file": "org/eclipse/rdf4j/common/io/ZipUtil.java", "method": "ZipUtil.writeEntry[90-105]", "lineno": 95, "content": "__insert__", "_method_simple_signature": "writeEntry(ZipFile,ZipEntry,File)", "_file_in_project": "util/src/main/java/org/eclipse/rdf4j/common/io/ZipUtil.java"}], "dir.src.classes": "util/src/main/java", "dir.src.tests": "util/src/test/java", "tests.trigger": ["org.eclipse.rdf4j.common.io.ZipUtilTest::testWriteEntryPathTraversing"], "bug_method": "\tpublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir)\n\t\tthrows IOException\n\t{\n\t\tFile outFile = new File(destDir, entry.getName());\n\n\t\tif (entry.isDirectory()) {\n\t\t\toutFile.mkdirs();\n\t\t}\n\t\telse {\n\t\t\toutFile.getParentFile().mkdirs();\n\n\t\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\t\tIOUtil.writeStream(in, outFile);\n\t\t\t}\n\t\t}\n\t}", "fixed_method": "\tpublic static void writeEntry(ZipFile zipFile, ZipEntry entry, File destDir) throws IOException {\n\t\tFile outFile = new File(destDir, entry.getName());\n\n\t\tif (! outFile.getCanonicalFile().toPath().startsWith(destDir.toPath())) {\n\t\t\tthrow new IOException(\"Zip entry outside destination directory: \" + entry.getName());\n\t\t}\n\t\t\t\t\n\t\tif (entry.isDirectory()) {\n\t\t\toutFile.mkdirs();\n\t\t} else {\n\t\t\toutFile.getParentFile().mkdirs();\n\n\t\t\ttry (InputStream in = zipFile.getInputStream(entry)) {\n\t\t\t\tIOUtil.writeStream(in, outFile);\n\t\t\t}\n\t\t}\n\t}", "_vul4j_info": {"vul_id": "VUL4J-43", "cve_id": "CVE-2018-20227", "cwe_id": "CWE-22", "project": ["eclipse_rdf4j"], "project_url": "https://github.com/eclipse/rdf4j", "build_system": "Maven", "compliance_level": "8", "compile_cmd": "mvn -DskipTests clean install; mvn -pl util test-compile", "test_all_cmd": "mvn test -pl util", "test_cmd": "mvn test -pl util -Dtest=org.eclipse.rdf4j.common.io.ZipUtilTest#testWriteEntryPathTraversing", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "util", "fixing_commit_hash": "df15a4d7a8f2789c043b27c9eafe1b30316cfa79", "human_patch_url": "https://github.com/eclipse/rdf4j/commit/df15a4d7a8f2789c043b27c9eafe1b30316cfa79", "failing_tests": ["org.eclipse.rdf4j.common.io.ZipUtilTest#testWriteEntryPathTraversing"], "warning": [""]}, "_vul4j_detailed_info": {"no": "43", "vul_id": "VUL4J-43", "cve_id": "CVE-2018-20227", "cwe_id": "CWE-22", "cwe_name": "Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')", "owasp_id": "A5", "repo_slug": "eclipse/rdf4j", "human_patch": "https://github.com/eclipse/rdf4j/commit/df15a4d7a8f2789c043b27c9eafe1b30316cfa79", "build_system": "Maven", "compliance_level": "8", "failing_tests": "org.eclipse.rdf4j.common.io.ZipUtilTest#testWriteEntryPathTraversing", "compile_cmd": "mvn -DskipTests clean install; mvn -pl util test-compile", "test_all_cmd": "mvn test -pl util", "test_cmd": "mvn test -pl util -Dtest=org.eclipse.rdf4j.common.io.ZipUtilTest#testWriteEntryPathTraversing", "cmd_options": "-Dhttps.protocols=TLSv1.2 -Denforcer.skip=true -Dcheckstyle.skip=true -Dcobertura.skip=true -DskipITs=true -Drat.skip=true -Dlicense.skip=true -Dpmd.skip=true -Dfindbugs.skip=true -Dgpg.skip=true -Dskip.npm=true -Dskip.gulp=true -Dskip.bower=true -Danimal.sniffer.skip=true -V -B", "failing_module": "util", "src": "src/main/java", "test": "src/test/java", "src_classes": "target/classes", "test_classes": "target/test-classes", "warning": ""}}]